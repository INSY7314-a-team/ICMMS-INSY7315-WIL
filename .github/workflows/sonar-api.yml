name: SonarQube - API

on:
  push:
    branches: [ main ]
    paths:
      - 'Api/**'
      - '.github/workflows/sonar-api.yml'
  pull_request:
    paths:
      - 'Api/**'
      - '.github/workflows/sonar-api.yml'

jobs:
  scan-api:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java 17 (required by SonarScanner)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'   # match your API SDK version

      - name: Install SonarScanner for .NET
        run: dotnet tool install dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Sonar BEGIN (API)
        working-directory: Api
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ..\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"insy7315_INSY7315-A-Team" `
            /o:"insy7315" `
            /d:sonar.cs.opencover.reportsPaths="**\coverage.opencover.xml" `
            /d:sonar.token="${{ env.SONAR_TOKEN }}"

      - name: Restore (API)
        working-directory: Api
        run: dotnet restore

      - name: Build (API)
        working-directory: Api
        run: dotnet build --no-restore --configuration Debug

      - name: Test with Coverage (API) - optional
        working-directory: Api
        run: |
          $tests = Get-ChildItem -Recurse -Filter *.csproj | Where-Object { $_.FullName -match 'Test' -or $_.FullName -match 'Tests' }
          if ($tests) {
            foreach ($proj in $tests) {
              dotnet test $proj.FullName --no-build `
                /p:CollectCoverage=true `
                /p:CoverletOutputFormat=opencover `
                /p:CoverletOutput=./TestResults/coverage.opencover.xml
            }
          } else {
            Write-Host "No test projects found under Api/*"

      - name: Sonar END (API)
        working-directory: Api
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ..\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ env.SONAR_TOKEN }}"
