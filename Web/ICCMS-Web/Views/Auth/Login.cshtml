@model ICCMS_Web.Models.LoginViewModel

@{
    ViewData["Title"] = "Login";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Login to ICMMS</h3>
                </div>
                <div class="card-body">
                    <!-- Lockout Message -->
                    <div id="lockoutMessage" class="alert alert-warning" style="display: none;">
                        <h5>Account Temporarily Locked</h5>
                        <p>Please wait <span id="countdown">5:00</span> minutes before trying again.</p>
                        <div class="progress">
                            <div id="progressBar" class="progress-bar" role="progressbar" style="width: 100%"></div>
                        </div>
                    </div>

                    <form id="loginForm">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        
                        <div class="mb-3">
                            <label asp-for="Email" class="form-label"></label>
                            <input asp-for="Email" class="form-control" id="emailInput" />
                            <span asp-validation-for="Email" class="text-danger"></span>
                        </div>
                        
                        <div class="mb-3">
                            <label asp-for="Password" class="form-label"></label>
                            <input asp-for="Password" class="form-control" id="passwordInput" />
                            <span asp-validation-for="Password" class="text-danger"></span>
                        </div>
                        
                        <div class="mb-3 form-check">
                            <input asp-for="RememberMe" class="form-check-input" id="rememberMeInput" />
                            <label asp-for="RememberMe" class="form-check-label"></label>
                        </div>
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" id="loginButton">Login</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let countdownInterval;
        let lockoutEndTime;

        // Debug: Check if Firebase is loaded
        console.log('Firebase available:', typeof firebase !== 'undefined');
        if (typeof firebase !== 'undefined') {
            console.log('Firebase auth available:', typeof firebase.auth !== 'undefined');
        }

        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            console.log('Login form submitted');
            
            // Use the correct element IDs
            const email = document.getElementById('emailInput').value;
            const password = document.getElementById('passwordInput').value;
            const rememberMe = document.getElementById('rememberMeInput').checked;
            
            console.log('Email:', email);
            console.log('Password length:', password.length);
            console.log('Remember me:', rememberMe);
            
            // Store original button text
            const submitBtn = e.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            
            try {
                // Show loading state
                submitBtn.textContent = 'Logging in...';
                submitBtn.disabled = true;
                
                // Check if Firebase is available
                if (typeof firebase === 'undefined') {
                    throw new Error('Firebase is not loaded. Please refresh the page and try again.');
                }
                
                console.log('Attempting Firebase sign in...');
                
                // Sign in with Firebase
                const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);
                const user = userCredential.user;
                
                console.log('Firebase sign in successful:', user.email);
                
                // Get the ID token
                const idToken = await user.getIdToken();
                console.log('Got ID token');
                
                // Send token to your API for verification and user data
                const response = await fetch('/Auth/VerifyToken', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        idToken: idToken,
                        email: email,
                        rememberMe: rememberMe
                    })
                });
                
                console.log('API response status:', response.status);
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('API response:', result);
                    
                    if (result.success) {
                        // Redirect to home page
                        window.location.href = '/';
                    } else {
                        if (result.isLocked) {
                            // Show lockout message and start countdown
                            showLockoutMessage(result.lockoutEndTime);
                        } else {
                            alert(result.message || 'Login failed');
                        }
                    }
                } else {
                    alert('Login failed. Please try again.');
                }
                
            } catch (error) {
                console.error('Login error:', error);
                console.error('Error code:', error.code);
                console.error('Error message:', error.message);
                
                // Check if this is a Firebase auth error (invalid credentials)
                if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password' || error.code === 'auth/invalid-credential') {
                    console.log('Firebase auth error - recording failed attempt');
                    
                    // Make a request to record the failed attempt
                    try {
                        const response = await fetch('/Auth/VerifyToken', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: JSON.stringify({
                                idToken: '',
                                email: email,
                                rememberMe: rememberMe
                            })
                        });
                        
                        console.log('Failed attempt API response status:', response.status);
                        
                        if (response.ok) {
                            const result = await response.json();
                            console.log('Failed attempt API response:', result);
                            
                            if (result.isLocked) {
                                showLockoutMessage(result.lockoutEndTime);
                            } else {
                                const message = result.message || 'Invalid email or password.';
                                alert(`${message} ${result.remainingAttempts ? `(${result.remainingAttempts} attempts remaining)` : ''}`);
                            }
                        } else {
                            alert('Login failed: Invalid email or password.');
                        }
                    } catch (apiError) {
                        console.error('API error:', apiError);
                        alert('Login failed: Invalid email or password.');
                    }
                } else {
                    alert('Login failed: ' + error.message);
                }
            } finally {
                // Reset button state
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            }
        });

        function showLockoutMessage(lockoutEndTimeStr) {
            const lockoutMessage = document.getElementById('lockoutMessage');
            const loginForm = document.getElementById('loginForm');
            const countdownElement = document.getElementById('countdown');
            const progressBar = document.getElementById('progressBar');
            
            // Show lockout message and hide form
            lockoutMessage.style.display = 'block';
            loginForm.style.display = 'none';
            
            // Parse lockout end time
            lockoutEndTime = new Date(lockoutEndTimeStr);
            const totalSeconds = 5 * 60; // 5 minutes in seconds
            let remainingSeconds = Math.max(0, Math.floor((lockoutEndTime - new Date()) / 1000));
            
            // Start countdown
            updateCountdown();
            
            function updateCountdown() {
                const now = new Date();
                remainingSeconds = Math.max(0, Math.floor((lockoutEndTime - now) / 1000));
                
                if (remainingSeconds <= 0) {
                    // Lockout expired
                    clearInterval(countdownInterval);
                    lockoutMessage.style.display = 'none';
                    loginForm.style.display = 'block';
                    return;
                }
                
                const minutes = Math.floor(remainingSeconds / 60);
                const seconds = remainingSeconds % 60;
                countdownElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                // Update progress bar
                const progressPercent = (remainingSeconds / totalSeconds) * 100;
                progressBar.style.width = `${progressPercent}%`;
            }
            
            // Update countdown every second
            countdownInterval = setInterval(updateCountdown, 1000);
            updateCountdown(); // Initial call
        }
    </script>
}
