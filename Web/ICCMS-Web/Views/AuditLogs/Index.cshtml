@model List<ICCMS_Web.Controllers.AuditLogViewModel>
@{
    ViewData["Title"] = "Audit Logs";
}

<div class="container-fluid">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0">
                <i class="fas fa-clipboard-list text-primary"></i>
                Audit Logs
            </h1>
            <p class="text-muted">Monitor and test system audit logging</p>
        </div>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createLogModal">
            <i class="fas fa-plus"></i> Create Test Log
        </button>
    </div>

    <!-- Alerts -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle"></i> @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle"></i> @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0">@Model.Count</h4>
                            <small>Total Logs</small>
                        </div>
                        <i class="fas fa-clipboard-list fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0">@Model.Count(l => l.IsActive)</h4>
                            <small>Active Logs</small>
                        </div>
                        <i class="fas fa-check-circle fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0">@Model.Select(l => l.LogType).Distinct().Count()</h4>
                            <small>Log Types</small>
                        </div>
                        <i class="fas fa-tags fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0">@Model.Select(l => l.UserId).Distinct().Count()</h4>
                            <small>Unique Users</small>
                        </div>
                        <i class="fas fa-users fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Audit Logs Table -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="fas fa-table"></i> Recent Audit Logs
            </h5>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Type</th>
                                <th>Title</th>
                                <th>User ID</th>
                                <th>Entity ID</th>
                                <th>Timestamp</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in Model.OrderByDescending(l => l.TimestampUtc))
                            {
                                <tr>
                                    <td>
                                        <span class="badge bg-primary">@log.LogType</span>
                                    </td>
                                    <td>
                                        <strong>@log.Title</strong>
                                        @if (!string.IsNullOrEmpty(log.Description))
                                        {
                                            <br><small class="text-muted">@log.Description</small>
                                        }
                                    </td>
                                    <td>
                                        <code>@log.UserId</code>
                                    </td>
                                    <td>
                                        <code>@log.EntityId</code>
                                    </td>
                                    <td>
                                        <small>@log.TimestampUtc.ToString("yyyy-MM-dd HH:mm:ss")</small>
                                    </td>
                                    <td>
                                        @if (log.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-info" onclick="viewLogDetails('@log.Id')">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-clipboard-list fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No audit logs found</h5>
                    <p class="text-muted">Create your first test log to get started</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Create Log Modal -->
<div class="modal fade" id="createLogModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus-circle text-primary"></i> Create Test Audit Log
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createLogForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Log Type *</label>
                                <select class="form-select" id="logType" name="logType" required>
                                    <option value="">Select log type...</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">User ID *</label>
                                <input type="text" class="form-control" id="userId" name="userId" 
                                       placeholder="Enter user ID" required>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Title *</label>
                        <input type="text" class="form-control" id="title" name="title" 
                               placeholder="Enter log title" required maxlength="200">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" id="description" name="description" 
                                  placeholder="Enter log description (optional)" rows="3" maxlength="4000"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Entity ID *</label>
                        <input type="text" class="form-control" id="entityId" name="entityId" 
                               placeholder="Enter entity ID (project, document, etc.)" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createTestLog()">
                    <i class="fas fa-plus"></i> Create Log
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Log Details Modal -->
<div class="modal fade" id="logDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-info-circle text-info"></i> Log Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="logDetailsContent">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Load log types when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadLogTypes();
        });

        // Load available log types from API
        async function loadLogTypes() {
            try {
                const response = await fetch('/AuditLogs/GetLogTypes');
                const result = await response.json();
                
                if (result.success) {
                    const select = document.getElementById('logType');
                    select.innerHTML = '<option value="">Select log type...</option>';
                    
                    result.types.forEach(type => {
                        const option = document.createElement('option');
                        option.value = type;
                        option.textContent = type;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading log types:', error);
            }
        }

        // Create test audit log
        async function createTestLog() {
            const form = document.getElementById('createLogForm');
            const formData = new FormData(form);
            
            const requestData = {
                logType: formData.get('logType'),
                title: formData.get('title'),
                description: formData.get('description'),
                userId: formData.get('userId'),
                entityId: formData.get('entityId')
            };

            try {
                const response = await fetch('/AuditLogs/CreateLog', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });

                const result = await response.json();
                
                if (result.success) {
                    // Show success message
                    showAlert('success', `Audit log created successfully! ID: ${result.id}`);
                    
                    // Close modal and refresh page
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createLogModal'));
                    modal.hide();
                    
                    // Refresh page after short delay
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                } else {
                    showAlert('danger', result.message);
                }
            } catch (error) {
                showAlert('danger', `Error creating audit log: ${error.message}`);
            }
        }

        // View log details
        function viewLogDetails(logId) {
            // Find the log in the model data
            const log = @Html.Raw(Json.Serialize(Model));
            const foundLog = log.find(l => l.id === logId);
            
            if (foundLog) {
                const content = document.getElementById('logDetailsContent');
                content.innerHTML = `
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Log Information</h6>
                            <table class="table table-sm">
                                <tr><td><strong>ID:</strong></td><td><code>${foundLog.id}</code></td></tr>
                                <tr><td><strong>Type:</strong></td><td><span class="badge bg-primary">${foundLog.logType}</span></td></tr>
                                <tr><td><strong>Title:</strong></td><td>${foundLog.title}</td></tr>
                                <tr><td><strong>Status:</strong></td><td>${foundLog.isActive ? '<span class="badge bg-success">Active</span>' : '<span class="badge bg-secondary">Inactive</span>'}</td></tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6>Details</h6>
                            <table class="table table-sm">
                                <tr><td><strong>User ID:</strong></td><td><code>${foundLog.userId}</code></td></tr>
                                <tr><td><strong>Entity ID:</strong></td><td><code>${foundLog.entityId}</code></td></tr>
                                <tr><td><strong>Timestamp:</strong></td><td>${new Date(foundLog.timestampUtc).toLocaleString()}</td></tr>
                                <tr><td><strong>Description:</strong></td><td>${foundLog.description || 'N/A'}</td></tr>
                            </table>
                        </div>
                    </div>
                `;
                
                const modal = new bootstrap.Modal(document.getElementById('logDetailsModal'));
                modal.show();
            }
        }

        // Show alert message
        function showAlert(type, message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'}"></i> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.querySelector('.container-fluid').insertBefore(alertDiv, document.querySelector('.d-flex.justify-content-between'));
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }
    </script>
}