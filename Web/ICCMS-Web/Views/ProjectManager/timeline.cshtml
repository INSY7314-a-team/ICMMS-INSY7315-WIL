@using ICCMS_Web.Models

@model TimelineViewModel
@{
    ViewData["Title"] = "Timeline View";
}

<div class="space-y-6">
    <div class="flex items-center justify-between">
        <h1 class="text-3xl font-bold text-gray-900">Project Timeline</h1>
        <div class="flex items-center space-x-4">
            <button class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                Filter
            </button>
            <button class="px-4 py-2 bg-blue-700 text-white rounded-lg hover:bg-blue-800 transition-colors">
                Export Timeline
            </button>
        </div>
    </div>

    <div class="bg-white rounded-lg shadow-sm border border-gray-200">
        <div class="p-6">
            @for (int projectIndex = 0; projectIndex < Model.Projects.Count; projectIndex++)
            {
                var project = Model.Projects[projectIndex];
                <div class="@(projectIndex > 0 ? "border-t border-gray-200 pt-6 mt-6" : "")">
                    <div class="flex items-center justify-between mb-4">
                        <div>
                            <h3 class="text-xl font-semibold text-gray-900">@project.Name</h3>
                            <p class="text-gray-600">@project.Location</p>
                        </div>
                        <div class="text-right">
                            <div class="flex items-center space-x-2 text-sm text-gray-600">
                                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                                <span>@project.StartDate.ToString("dd/MM/yyyy") - @project.DueDate.ToString("dd/MM/yyyy")</span>
                            </div>
                        </div>
                    </div>

                    <div class="relative">
                        <div class="flex space-x-1 mb-4">
                            @foreach (var phase in project.Phases)
                            {
                                <div class="flex-1">
                                    <div class="h-2 rounded @(phase.Status switch {
                                        PhaseStatus.Completed => "bg-green-500",
                                        PhaseStatus.InProgress => "bg-blue-500",
                                        PhaseStatus.Pending => "bg-gray-300",
                                        PhaseStatus.Delayed => "bg-red-500",
                                        _ => "bg-gray-300"
                                    })"></div>
                                </div>
                            }
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            @foreach (var phase in project.Phases)
                            {
                                <div class="bg-gray-50 rounded-lg p-4">
                                    <div class="flex items-center space-x-2 mb-2">
                                        @if (phase.Status == PhaseStatus.Completed)
                                        {
                                            <svg class="h-4 w-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                        }
                                        else if (phase.Status == PhaseStatus.InProgress)
                                        {
                                            <svg class="h-4 w-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                        }
                                        else if (phase.Status == PhaseStatus.Delayed)
                                        {
                                            <svg class="h-4 w-4 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                            </svg>
                                        }
                                        <h4 class="font-medium text-gray-900">@phase.Name</h4>
                                    </div>
                                    <p class="text-sm text-gray-600 mb-2">@phase.Description</p>
                                    <div class="flex justify-between text-sm">
                                        <span class="text-gray-500">Duration</span>
                                        <span class="font-medium">@phase.Duration</span>
                                    </div>
                                    <div class="flex justify-between text-sm">
                                        <span class="text-gray-500">Budget</span>
                                        <span class="font-medium">R@phase.Budget.ToString("N0")</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>