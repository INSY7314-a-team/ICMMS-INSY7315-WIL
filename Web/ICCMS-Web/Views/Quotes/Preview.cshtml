@model ICCMS_Web.Models.QuotePreviewVM
@using System.Security.Claims
@{
    Layout = null;

    var pmName  = User?.Identity?.Name ?? "Project Manager";
    var pmEmail = User?.FindFirst(ClaimTypes.Email)?.Value ?? "";

    string F(decimal v) => "R " + v.ToString("#,0.##");

    var items  = Model.Items ?? new();
    var groups = items.GroupBy(i => string.IsNullOrWhiteSpace(i.PhaseName) ? "General" : i.PhaseName)
                      .OrderBy(g => g.Key);

    decimal m = (decimal)Model.MarkupPercent, t = (decimal)Model.TaxPercent;
    decimal grandSub=0, grandMu=0, grandTx=0, grandTot=0;

    string PhaseBlurb(string key)
    {
        key = (key ?? "").Trim().ToLowerInvariant();
        return key switch {
          "precon" or "pre-construction" or "precon " or "pre-con" => "Pre-construction: design coordination, permits, site setup, prelims.",
          "demo" or "demolition" => "Demolition / site prep: strip-out, clearing, skips, haul-away.",
          "struct" or "structural" => "Structural / core & shell: concrete, steel, framing, primary works.",
          "mep" => "MEP rough-in: electrical, plumbing, HVAC first fix.",
          "finishes" or "finish" => "Finishes / fit-out: ceilings, flooring, paint, fixtures.",
          "closeout" or "commissioning & closeout" => "Commissioning & closeout: testing, snagging, handover docs.",
          _ => "Items captured for this phase."
        };
    }
}
<!doctype html>
<html>
<head>
<meta charset="utf-8" />
<title>@Model.Title</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
  :root{
    --ink:#0f172a; --muted:#6b7280;
    --brand:#FFD200; --brand-ink:#111111;
    --brand-soft:#FFF7CC; --line:#e5e7eb;
  }
  html,body{color:var(--ink)}
  body{background:#f8fafc;font-size:13px;line-height:1.35}
  .doc{max-width:980px;margin:24px auto;padding:0 16px}

  /* Header */
  .header{background:#fff;border:1px solid var(--line);border-radius:10px;padding:12px 14px}
  .brandbar{height:4px;background:var(--brand);border-radius:999px;margin:10px 0 16px 0}

  .muted{color:var(--muted)}
  .num{font-variant-numeric: tabular-nums}
  .h-title{font-size:20px;margin:0}
  .h-section{font-size:14px;margin:18px 0 4px 0}
  .phase-desc{margin-top:-2px;margin-bottom:8px;color:#64748b;font-size:12px}

  /* Phase heading accent */
  .accent{border-left:4px solid var(--brand);padding-left:8px}

  /* Tables */
  table{font-size:12.5px}
  thead th{font-size:11px;letter-spacing:.02em;text-transform:uppercase;color:#334155;background:var(--brand-soft)}
  th, td{padding:.45rem .6rem}
  .w-qty{width:80px}
  .w-unit{width:70px}
  .w-price,.w-sub,.w-mu,.w-tx,.w-tot{width:120px}
  .money{text-align:right}
  tfoot td{background:#fafafa}

  /* Totals card */
  .totals{min-width:340px;border-left:4px solid var(--brand)}
  .totals .line{display:flex;justify-content:space-between;margin:.2rem 0}
  .totals .grand{border-top:1px solid var(--line);margin-top:.35rem;padding-top:.35rem;font-size:15px}
  .chip-yellow{background:var(--brand);color:var(--brand-ink);border-radius:999px;padding:.12rem .5rem;font-size:12px}

  /* Phase guide */
  .guide{border:1px dashed var(--brand);background:#fffef4;border-radius:10px}

  /* Print */
  @@page{size:A4;margin:16mm 12mm}
  @@media print{
    body{background:#fff}
    .no-print{display:none!important}
    .doc{max-width:none;margin:0;padding:0}
  }
</style>
</head>
<body>
  <div class="doc">
    <!-- Header (white so the yellow logo pops) -->
    <div class="header d-flex justify-content-between align-items-center">
      <div class="d-flex align-items-center">
        <img src="~/img/taskit-logo.png" alt="Taskit" style="height:42px" class="me-2">
        <div class="fw-semibold">Quote generated with Taskit app</div>
      </div>
      <div class="text-end">
        <div class="h-title fw-bold">@Model.Title</div>
        <div class="muted">Markup @Model.MarkupPercent% • Tax @Model.TaxPercent%</div>
      </div>
    </div>
    <div class="brandbar"></div>

    <!-- Parties -->
    <div class="row g-3 mb-3">
      <div class="col-md-6">
        <div class="card p-3">
          <div class="d-flex justify-content-between align-items-center mb-1">
            <div class="fw-semibold">Client</div>
            <span class="chip-yellow">Quotee</span>
          </div>
          <div>@Model.ClientName</div>
          @if(!string.IsNullOrWhiteSpace(Model.ClientOrg)){<div class="muted">@Model.ClientOrg</div>}
          @if(!string.IsNullOrWhiteSpace(Model.ClientEmail)){<div>@Model.ClientEmail</div>}
          @if(!string.IsNullOrWhiteSpace(Model.ClientPhone)){<div>@Model.ClientPhone</div>}
          @if(!string.IsNullOrWhiteSpace(Model.ClientAddress)){<div>@Model.ClientAddress</div>}
        </div>
      </div>
      <div class="col-md-6">
        <div class="card p-3">
          <div class="d-flex justify-content-between align-items-center mb-1">
            <div class="fw-semibold">Project Manager</div>
            <span class="chip-yellow">Quoter</span>
          </div>
          <div>@pmName</div>
          @if(!string.IsNullOrWhiteSpace(pmEmail)){<div>@pmEmail</div>}
        </div>
      </div>
    </div>

    <!-- Phase guide -->
    <div class="guide p-3 mb-3">
      <div class="fw-semibold mb-1">Phase guide</div>
      <div class="small muted">
        Pre-construction (design, permits) • Demo (strip-out) • Struct (core & shell) • MEP (first fix) • Finishes (fit-out) • Closeout (testing, handover).
      </div>
    </div>

    <!-- Breakdown -->
    @foreach (var g in groups)
    {
      var phaseKeyGuess = (g.FirstOrDefault()?.PhaseKey ?? g.Key ?? "").ToLowerInvariant();
      decimal pSub=0, pMu=0, pTx=0, pTot=0;

      <div class="h-section fw-semibold accent">@g.Key</div>
      <div class="phase-desc">@PhaseBlurb(phaseKeyGuess)</div>

      <div class="table-responsive">
        <table class="table table-sm align-middle">
          <thead>
            <tr>
              <th>Item</th>
              <th class="w-qty money">Qty</th>
              <th class="w-unit">Unit</th>
              <th class="w-price money">Unit Price</th>
              <th class="w-sub money">Subtotal</th>
              <th class="w-mu money">Markup (@Model.MarkupPercent%)</th>
              <th class="w-tx money">Tax (@Model.TaxPercent%)</th>
              <th class="w-tot money">Total</th>
            </tr>
          </thead>
          <tbody>
          @foreach (var it in g)
          {
            var sub = (decimal)it.Qty * (decimal)it.UnitPrice;
            var mu  = sub * m/100m;
            var tx  = (sub + mu) * t/100m;
            var tot = sub + mu + tx;
            pSub += sub; pMu += mu; pTx += tx; pTot += tot;
            <tr>
              <td>
                <div class="fw-semibold">@it.Name</div>
                <div class="small muted">
                  @it.Type @((!string.IsNullOrWhiteSpace(it.ContractorName) ? "• " + it.ContractorName : ""))
                </div>
              </td>
              <td class="money num">@it.Qty.ToString("#,0.##")</td>
              <td>@it.Unit</td>
              <td class="money num">@F((decimal)it.UnitPrice)</td>
              <td class="money num">@F(sub)</td>
              <td class="money num text-muted">@F(mu)</td>
              <td class="money num text-muted">@F(tx)</td>
              <td class="money num fw-semibold">@F(tot)</td>
            </tr>
          }
          </tbody>
          <tfoot>
            <tr>
              <td class="text-end fw-semibold" colspan="4">Phase totals</td>
              <td class="money num fw-semibold">@F(pSub)</td>
              <td class="money num fw-semibold">@F(pMu)</td>
              <td class="money num fw-semibold">@F(pTx)</td>
              <td class="money num fw-bold">@F(pTot)</td>
            </tr>
          </tfoot>
        </table>
      </div>
      grandSub+=pSub; grandMu+=pMu; grandTx+=pTx; grandTot+=pTot;
    }

    <!-- Grand totals -->
    <div class="d-flex justify-content-end mt-2">
      <div class="card p-3 totals">
        <div class="line"><span>Subtotal</span><strong class="num">@F(grandSub)</strong></div>
        <div class="line"><span>Markup (@Model.MarkupPercent%)</span><strong class="num">@F(grandMu)</strong></div>
        <div class="line"><span>Tax (@Model.TaxPercent%)</span><strong class="num">@F(grandTx)</strong></div>
        <div class="line grand"><span>Total</span><strong class="num">@F(grandTot)</strong></div>
      </div>
    </div>

    <!-- Actions (screen only) -->
    <div class="mt-4 no-print d-flex gap-2">
      <button class="btn btn-primary" onclick="window.print()">Download PDF</button>
      <button class="btn btn-warning" disabled title="Stub for later">Send quote</button>
    </div>
  </div>
</body>
</html>
