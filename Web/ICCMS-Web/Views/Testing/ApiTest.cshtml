@{
    ViewData["Title"] = "API Testing Dashboard";
}

<style>
.bg-gradient-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.bg-gradient-success {
    background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
}

.bg-gradient-info {
    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
}

.bg-gradient-warning {
    background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
}

.bg-gradient-light {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
}

.card {
    transition: all 0.3s ease;
    border: none;
    border-radius: 16px;
    overflow: hidden;
}

.card:hover {
    transform: translateY(-8px);
    box-shadow: 0 20px 40px rgba(0,0,0,0.15);
}

.testing-card {
    transition: all 0.4s ease;
    border: none;
    border-radius: 16px;
    overflow: hidden;
    position: relative;
}

.testing-card:hover {
    transform: translateY(-10px) scale(1.02);
    box-shadow: 0 25px 50px rgba(0,0,0,0.2);
}

.btn-testing {
    border-radius: 30px;
    font-weight: 600;
    padding: 0.75rem 2rem;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-size: 0.9rem;
}

.btn-testing:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 25px rgba(0,0,0,0.2);
}

.method-badge {
    font-size: 0.75rem;
    font-weight: 600;
    padding: 0.5rem 0.75rem;
    border-radius: 20px;
}

.alert {
    border: none;
    border-radius: 12px;
    border-left: 4px solid;
}

.alert-success {
    border-left-color: #28a745;
    background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
}

.alert-warning {
    border-left-color: #ffc107;
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
}

.alert-danger {
    border-left-color: #dc3545;
    background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
}

.alert-info {
    border-left-color: #17a2b8;
    background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
}
</style>

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card bg-gradient-primary text-white border-0 shadow-lg rounded-3">
                <div class="card-body p-4">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h2 class="mb-2 fw-bold">
                                <i class="fas fa-flask me-3"></i>API Testing Dashboard
                            </h2>
                            <p class="mb-0 opacity-90">
                                Comprehensive testing interface for ICCMS API endpoints with real-time monitoring
                            </p>
                        </div>
                        <div class="col-md-4 text-end">
                            <div class="d-flex flex-column align-items-end">
                                <span class="badge bg-light text-dark fs-6 mb-2 px-3 py-2">
                                    <i class="fas fa-server me-2"></i>100+ Endpoints
                                </span>
                                <span class="badge bg-success fs-6 px-3 py-2">
                                    <i class="fas fa-shield-alt me-2"></i>Tester Role
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Console Output Panel -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm rounded-3">
                <div class="card-header bg-dark text-light border-0 rounded-top-3 py-3">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-terminal fa-lg me-3 text-success"></i>
                            <div>
                                <h6 class="mb-1 fw-bold">Console Output</h6>
                                <small class="text-light opacity-75">Real-time debugging and status tracking</small>
                            </div>
                        </div>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-light btn-sm" onclick="clearConsoleOutput()">
                                <i class="fas fa-trash me-1"></i>Clear
                            </button>
                            <button type="button" class="btn btn-outline-light btn-sm" onclick="copyConsoleOutput()">
                                <i class="fas fa-copy me-1"></i>Copy
                            </button>
                            <button type="button" class="btn btn-outline-warning btn-sm" onclick="clearAllEditedPayloads()">
                                <i class="fas fa-undo me-1"></i>Reset All Payloads
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body bg-dark p-0">
                    <div id="console-output" class="console-output p-3 text-light" style="height: 200px; overflow-y: auto; font-family: 'Courier New', monospace; font-size: 12px; line-height: 1.4;">
                        <div class="text-muted opacity-75">Console output will appear here...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Left Navigation Panel -->
        <div class="col-md-3">
            <div class="card border-0 shadow-lg rounded-3">
                <div class="card-header bg-gradient-primary text-white border-0 rounded-top-3 py-3">
                    <h6 class="mb-0 fw-bold"><i class="fas fa-layer-group me-2"></i> API Categories</h6>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush" id="api-categories">
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="auth">
                            <i class="fas fa-key me-2 text-primary"></i>
                            <span>Authentication</span>
                            <small class="text-muted ms-auto">3 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="admin">
                            <i class="fas fa-crown me-2 text-primary"></i>
                            <span>Admin Management</span>
                            <small class="text-muted ms-auto">9 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="quotations">
                            <i class="fas fa-file-invoice me-2 text-success"></i>
                            <span>Quotations</span>
                            <small class="text-muted ms-auto">15 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="invoices">
                            <i class="fas fa-receipt me-2 text-info"></i>
                            <span>Invoices</span>
                            <small class="text-muted ms-auto">12 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="documents">
                            <i class="fas fa-file-alt me-2 text-warning"></i>
                            <span>Documents</span>
                            <small class="text-muted ms-auto">6 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="estimates">
                            <i class="fas fa-calculator me-2 text-secondary"></i>
                            <span>Estimates</span>
                            <small class="text-muted ms-auto">6 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="messages">
                            <i class="fas fa-comments me-2 text-info"></i>
                            <span>Messages</span>
                            <small class="text-muted ms-auto">7 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="notifications">
                            <i class="fas fa-bell me-2 text-warning"></i>
                            <span>Notifications</span>
                            <small class="text-muted ms-auto">8 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="payments">
                            <i class="fas fa-credit-card me-2 text-success"></i>
                            <span>Payments</span>
                            <small class="text-muted ms-auto">8 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="auditlogs">
                            <i class="fas fa-clipboard-list me-2 text-dark"></i>
                            <span>Audit Logs</span>
                            <small class="text-muted ms-auto">6 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="clients">
                            <i class="fas fa-building me-2 text-info"></i>
                            <span>Client Portal</span>
                            <small class="text-muted ms-auto">15 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="contractors">
                            <i class="fas fa-tools me-2 text-warning"></i>
                            <span>Contractor Portal</span>
                            <small class="text-muted ms-auto">6 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="projectmanager">
                            <i class="fas fa-project-diagram me-2 text-success"></i>
                            <span>Project Manager</span>
                            <small class="text-muted ms-auto">20 endpoints</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action d-flex align-items-center" data-category="users">
                            <i class="fas fa-users me-2 text-primary"></i>
                            <span>User Management</span>
                            <small class="text-muted ms-auto">1 endpoint</small>
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Content Panel -->
        <div class="col-md-9">
            <div class="card border-0 shadow-lg rounded-3 h-100">
                <div class="card-header bg-gradient-light border-0 rounded-top-3 py-3">
                    <h6 class="mb-0 fw-bold text-dark" id="selected-category-title">
                        <i class="fas fa-arrow-left me-2 text-muted"></i>Select a category from the left to test endpoints
                    </h6>
                </div>
                <div class="card-body" id="endpoints-content">
                    <!-- Default Content -->
                    <div id="default-content" class="text-center text-muted py-5">
                        <div class="bg-light rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 80px; height: 80px;">
                            <i class="fas fa-arrow-left fa-2x text-muted"></i>
                        </div>
                        <h5 class="text-muted mb-2">No Category Selected</h5>
                        <p class="text-muted mb-0">Choose an API category from the left panel to see available endpoints</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Payload Editor Modal -->
<div class="modal fade" id="payloadEditorModal" tabindex="-1" aria-labelledby="payloadEditorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="payloadEditorModalLabel">
                    <i class="fas fa-edit me-2"></i>Edit Request Payload
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="text-primary mb-3">
                            <i class="fas fa-code me-2"></i>JSON Payload
                        </h6>
                        <textarea id="payloadEditor" class="form-control" rows="20" style="font-family: 'Courier New', monospace; font-size: 12px;"></textarea>
                        <div class="mt-2">
                            <button class="btn btn-outline-primary btn-sm" onclick="formatJSON()">
                                <i class="fas fa-magic me-1"></i>Format JSON
                            </button>
                            <button class="btn btn-outline-success btn-sm ms-2" onclick="validateJSON()">
                                <i class="fas fa-check me-1"></i>Validate
                            </button>
                            <button class="btn btn-outline-info btn-sm ms-2" onclick="loadSamplePayload()">
                                <i class="fas fa-undo me-1"></i>Reset to Sample
                            </button>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6 class="text-success mb-3">
                            <i class="fas fa-info-circle me-2"></i>Request Details
                        </h6>
                        <div class="card bg-light">
                            <div class="card-body">
                                <p><strong>Method:</strong> <span id="modalMethod" class="badge bg-primary"></span></p>
                                <p><strong>Endpoint:</strong> <code id="modalEndpoint"></code></p>
                                <p><strong>Description:</strong> <span id="modalDescription"></span></p>
                                
                                <!-- ID Input Section -->
                                <div id="idInputSection" class="mt-3" style="display: none;">
                                    <hr>
                                    <h6 class="text-primary">ID Configuration:</h6>
                                    <div class="input-group mb-2">
                                        <span class="input-group-text">
                                            <i class="fas fa-id-card"></i>
                                        </span>
                                        <input type="text" id="customIdInput" class="form-control" placeholder="Enter ID (e.g., user123, project456)" value="sample123">
                                        <button class="btn btn-outline-secondary" type="button" onclick="generateRandomId()">
                                            <i class="fas fa-dice me-1"></i>Generate
                                        </button>
                                    </div>
                                    <small class="text-muted">This ID will replace <code>{id}</code> in the endpoint URL</small>
                                </div>
                                
                                <hr>
                                <h6 class="text-warning">Tips:</h6>
                                <ul class="small">
                                    <li>Use <code>Ctrl+A</code> to select all</li>
                                    <li>Use <code>Ctrl+Z</code> to undo changes</li>
                                    <li>Click "Format JSON" to beautify</li>
                                    <li>Click "Validate" to check syntax</li>
                                    <li>Set custom ID above for <code>{id}</code> endpoints</li>
                                </ul>
                            </div>
                        </div>
                        <div class="mt-3">
                            <h6 class="text-info">Sample Data Helpers:</h6>
                            <div class="btn-group-vertical w-100" role="group">
                                <button class="btn btn-outline-secondary btn-sm" onclick="insertSampleId()">
                                    <i class="fas fa-id-card me-1"></i>Insert Sample ID
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" onclick="insertCurrentDate()">
                                    <i class="fas fa-calendar me-1"></i>Insert Current Date
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" onclick="insertSampleEmail()">
                                    <i class="fas fa-envelope me-1"></i>Insert Sample Email
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" onclick="insertSampleAmount()">
                                    <i class="fas fa-dollar-sign me-1"></i>Insert Sample Amount
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>Cancel
                </button>
                <button type="button" class="btn btn-success" onclick="saveAndTestPayload()">
                    <i class="fas fa-play me-1"></i>Save & Test
                </button>
                <button type="button" class="btn btn-primary" onclick="savePayload()">
                    <i class="fas fa-save me-1"></i>Save Payload
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// API endpoints configuration by controller - Updated to match current API structure
const apiEndpoints = {
    auth: {
        name: 'Authentication',
        icon: 'fas fa-key',
        color: 'primary',
        description: 'User authentication and token management',
        endpoints: [
            { 
                method: 'POST', 
                path: '/api/auth/login', 
                description: 'User login with email and password', 
                requiresBody: true,
                sampleBody: {
                    email: "user@example.com",
                    password: "password123"
                }
            },
            { 
                method: 'POST', 
                path: '/api/auth/verify-token', 
                description: 'Verify Firebase token', 
                requiresBody: true,
                sampleBody: {
                    token: "firebase_jwt_token_here"
                }
            },
            { 
                method: 'GET', 
                path: '/api/auth/profile', 
                description: 'Get authenticated user profile', 
                requiresBody: false 
            }
        ]
    },
    admin: {
        name: 'Admin Management',
        icon: 'fas fa-crown',
        color: 'primary',
        description: 'System administration and user management',
        endpoints: [
            { 
                method: 'GET', 
                path: '/api/admin/dashboard', 
                description: 'Get admin dashboard statistics', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/admin/users', 
                description: 'Get all active users', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/admin/users/{id}', 
                description: 'Get user by ID', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/admin/users', 
                description: 'Create new user', 
                requiresBody: true,
                sampleBody: {
                    firstName: "John",
                    lastName: "Doe",
                    email: "john.doe@example.com",
                    role: "Client",
                    isActive: true
                }
            },
            { 
                method: 'PUT', 
                path: '/api/admin/users/{id}', 
                description: 'Update user', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    firstName: "John",
                    lastName: "Doe",
                    email: "john.doe@example.com",
                    role: "Client",
                    isActive: true
                }
            },
            { 
                method: 'DELETE', 
                path: '/api/admin/users/{id}', 
                description: 'Delete user', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'PUT', 
                path: '/api/admin/users/{id}/deactivate', 
                description: 'Deactivate user', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'PUT', 
                path: '/api/admin/users/{id}/activate', 
                description: 'Activate user', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/admin/users/{id}/audit-logs', 
                description: 'Get user audit logs', 
                requiresBody: false, 
                hasId: true 
            }
        ]
    },
    quotations: {
        name: 'Quotations',
        icon: 'fas fa-file-invoice',
        color: 'success',
        description: 'Quotation management and workflow',
        endpoints: [
            { 
                method: 'GET', 
                path: '/api/quotations', 
                description: 'Get all quotations (PM/Admin/Tester)', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/quotations/{id}', 
                description: 'Get quotation by ID (PM/Admin/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/quotations/project/{projectId}', 
                description: 'Get quotations by project (PM/Admin/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/quotations/maintenance/{maintenanceRequestId}', 
                description: 'Get quotations by maintenance request (PM/Admin/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/quotations/client/{clientId}', 
                description: 'Get quotations by client (PM/Admin/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/quotations/me', 
                description: 'Get my quotations (Client/Tester)', 
                requiresBody: false 
            },
            { 
                method: 'POST', 
                path: '/api/quotations', 
                description: 'Create new quotation (PM/Tester)', 
                requiresBody: true,
                sampleBody: {
                    projectId: "project123",
                    clientId: "client456",
                    contractorId: "contractor789",
                    description: "Website development quotation",
                    validUntil: "2024-12-31T23:59:59Z",
                    status: "Draft",
                    items: [
                        {
                            name: "Frontend Development",
                            quantity: 40,
                            unitPrice: 150.00,
                            taxRate: 0.15
                        },
                        {
                            name: "Backend Development",
                            quantity: 30,
                            unitPrice: 200.00,
                            taxRate: 0.15
                        }
                    ],
                    currency: "ZAR"
                }
            },
            { 
                method: 'PUT', 
                path: '/api/quotations/{id}', 
                description: 'Update quotation (PM/Tester)', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    projectId: "project123",
                    clientId: "client456",
                    contractorId: "contractor789",
                    description: "Updated website development quotation",
                    validUntil: "2024-12-31T23:59:59Z",
                    status: "Draft",
                    items: [
                        {
                            name: "Frontend Development",
                            quantity: 45,
                            unitPrice: 160.00,
                            taxRate: 0.15
                        }
                    ],
                    currency: "ZAR"
                }
            },
            { 
                method: 'DELETE', 
                path: '/api/quotations/{id}', 
                description: 'Delete quotation (PM/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/quotations/{id}/submit-for-approval', 
                description: 'Submit quotation for approval (PM/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/quotations/{id}/pm-approve', 
                description: 'Approve quotation as PM (PM/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/quotations/{id}/send-to-client', 
                description: 'Send quotation to client (PM/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/quotations/{id}/client-decision', 
                description: 'Client decision on quotation (Client/Tester)', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    accept: true,
                    note: "We accept this quotation with minor modifications"
                }
            },
            { 
                method: 'POST', 
                path: '/api/quotations/{id}/convert-to-invoice', 
                description: 'Convert accepted quotation to invoice (PM/Tester)', 
                requiresBody: false, 
                hasId: true 
            }
        ]
    },
    invoices: {
        name: 'Invoices',
        icon: 'fas fa-receipt',
        color: 'info',
        description: 'Invoice management and workflow',
        endpoints: [
            { 
                method: 'GET', 
                path: '/api/invoices', 
                description: 'Get all invoices (PM/Admin/Tester)', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/invoices/{id}', 
                description: 'Get invoice by ID (PM/Admin/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/invoices/project/{projectId}', 
                description: 'Get invoices by project (PM/Admin/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/invoices/client/{clientId}', 
                description: 'Get invoices by client (PM/Admin/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/invoices/me', 
                description: 'Get my invoices (Client/Tester)', 
                requiresBody: false 
            },
            { 
                method: 'POST', 
                path: '/api/invoices', 
                description: 'Create new invoice (PM/Tester)', 
                requiresBody: true,
                sampleBody: {
                    projectId: "project123",
                    clientId: "client456",
                    contractorId: "contractor789",
                    description: "Website development invoice",
                    quotationId: "quotation123",
                    dueDate: "2024-12-31T23:59:59Z",
                    status: "Draft",
                    items: [
                        {
                            name: "Frontend Development",
                            quantity: 40,
                            unitPrice: 150.00,
                            taxRate: 0.15
                        }
                    ],
                    currency: "ZAR"
                }
            },
            { 
                method: 'PUT', 
                path: '/api/invoices/{id}', 
                description: 'Update invoice (PM/Tester)', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    projectId: "project123",
                    clientId: "client456",
                    contractorId: "contractor789",
                    description: "Updated website development invoice",
                    dueDate: "2024-12-31T23:59:59Z",
                    status: "Draft",
                    items: [
                        {
                            name: "Frontend Development",
                            quantity: 45,
                            unitPrice: 160.00,
                            taxRate: 0.15
                        }
                    ],
                    currency: "ZAR"
                }
            },
            { 
                method: 'DELETE', 
                path: '/api/invoices/{id}', 
                description: 'Delete invoice (PM/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/invoices/{id}/issue', 
                description: 'Issue invoice (PM/Tester)', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/invoices/{id}/mark-paid', 
                description: 'Mark invoice as paid (PM/Tester)', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    paidDate: "2024-01-15T10:30:00Z",
                    paidBy: "John Doe"
                }
            },
            { 
                method: 'POST', 
                path: '/api/invoices/{id}/cancel', 
                description: 'Cancel invoice (PM/Tester)', 
                requiresBody: false, 
                hasId: true 
            }
        ]
    },
    documents: {
        name: 'Documents',
        icon: 'fas fa-file-alt',
        color: 'warning',
        description: 'Document management system',
        endpoints: [
            { 
                method: 'GET', 
                path: '/api/documents', 
                description: 'Get all documents', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/documents/{id}', 
                description: 'Get document by ID', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/documents/project/{projectId}', 
                description: 'Get documents by project', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/documents', 
                description: 'Create new document', 
                requiresBody: true,
                sampleBody: {
                    projectId: "project123",
                    name: "Project Specification",
                    type: "PDF",
                    url: "https://example.com/doc.pdf",
                    uploadedBy: "user123",
                    description: "Detailed project specification document"
                }
            },
            { 
                method: 'PUT', 
                path: '/api/documents/{id}', 
                description: 'Update document', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    projectId: "project123",
                    name: "Updated Project Specification",
                    type: "PDF",
                    url: "https://example.com/doc-updated.pdf",
                    uploadedBy: "user123",
                    description: "Updated detailed project specification document"
                }
            },
            { 
                method: 'DELETE', 
                path: '/api/documents/{id}', 
                description: 'Delete document', 
                requiresBody: false, 
                hasId: true 
            }
        ]
    },
    estimates: {
        name: 'Estimates',
        icon: 'fas fa-calculator',
        color: 'secondary',
        description: 'Project cost estimation',
        endpoints: [
            { 
                method: 'GET', 
                path: '/api/estimates', 
                description: 'Get all estimates', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/estimates/{id}', 
                description: 'Get estimate by ID', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/estimates/project/{projectId}', 
                description: 'Get estimates by project', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/estimates', 
                description: 'Create new estimate', 
                requiresBody: true,
                sampleBody: {
                    projectId: "project123",
                    name: "Website Development Estimate",
                    description: "Initial cost estimate for website development",
                    estimatedCost: 15000.00,
                    estimatedHours: 100,
                    createdBy: "user123"
                }
            },
            { 
                method: 'PUT', 
                path: '/api/estimates/{id}', 
                description: 'Update estimate', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    projectId: "project123",
                    name: "Updated Website Development Estimate",
                    description: "Revised cost estimate for website development",
                    estimatedCost: 18000.00,
                    estimatedHours: 120,
                    createdBy: "user123"
                }
            },
            { 
                method: 'DELETE', 
                path: '/api/estimates/{id}', 
                description: 'Delete estimate', 
                requiresBody: false, 
                hasId: true 
            }
        ]
    },
    messages: {
        name: 'Messages',
        icon: 'fas fa-comments',
        color: 'info',
        description: 'Internal messaging system',
        endpoints: [
            { 
                method: 'GET', 
                path: '/api/messages', 
                description: 'Get all messages', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/messages/{id}', 
                description: 'Get message by ID', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/messages/user/{userId}', 
                description: 'Get messages by user', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/messages/project/{projectId}', 
                description: 'Get messages by project', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/messages', 
                description: 'Create new message', 
                requiresBody: true,
                sampleBody: {
                    senderId: "user123",
                    recipientId: "user456",
                    projectId: "project789",
                    subject: "Project Update",
                    content: "The project is progressing well and on schedule.",
                    priority: "Normal"
                }
            },
            { 
                method: 'PUT', 
                path: '/api/messages/{id}', 
                description: 'Update message', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    senderId: "user123",
                    recipientId: "user456",
                    projectId: "project789",
                    subject: "Updated Project Update",
                    content: "The project is progressing excellently and ahead of schedule.",
                    priority: "High"
                }
            },
            { 
                method: 'DELETE', 
                path: '/api/messages/{id}', 
                description: 'Delete message', 
                requiresBody: false, 
                hasId: true 
            }
        ]
    },
    notifications: {
        name: 'Notifications',
        icon: 'fas fa-bell',
        color: 'warning',
        description: 'System notifications and alerts',
        endpoints: [
            { 
                method: 'GET', 
                path: '/api/notifications', 
                description: 'Get all notifications', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/notifications/{id}', 
                description: 'Get notification by ID', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/notifications/user/{userId}', 
                description: 'Get notifications by user', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/notifications/user/{userId}/unread', 
                description: 'Get unread notifications by user', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/notifications', 
                description: 'Create new notification', 
                requiresBody: true,
                sampleBody: {
                    userId: "user123",
                    title: "Project Update",
                    message: "Your project has been updated",
                    type: "Info",
                    isRead: false
                }
            },
            { 
                method: 'PUT', 
                path: '/api/notifications/{id}', 
                description: 'Update notification', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    userId: "user123",
                    title: "Updated Project Update",
                    message: "Your project has been significantly updated",
                    type: "Warning",
                    isRead: false
                }
            },
            { 
                method: 'PUT', 
                path: '/api/notifications/{id}/mark-read', 
                description: 'Mark notification as read', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'DELETE', 
                path: '/api/notifications/{id}', 
                description: 'Delete notification', 
                requiresBody: false, 
                hasId: true 
            }
        ]
    },
    payments: {
        name: 'Payments',
        icon: 'fas fa-credit-card',
        color: 'success',
        description: 'Payment processing and tracking',
        endpoints: [
            { 
                method: 'GET', 
                path: '/api/payments', 
                description: 'Get all payments', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/payments/{id}', 
                description: 'Get payment by ID', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/payments/invoice/{invoiceId}', 
                description: 'Get payments by invoice', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/payments/project/{projectId}', 
                description: 'Get payments by project', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/payments/client/{clientId}', 
                description: 'Get payments by client', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/payments', 
                description: 'Create new payment', 
                requiresBody: true,
                sampleBody: {
                    invoiceId: "invoice123",
                    amount: 5000.00,
                    paymentMethod: "Bank Transfer",
                    paymentDate: "2024-01-15T10:30:00Z",
                    reference: "PAY-2024-001",
                    status: "Completed"
                }
            },
            { 
                method: 'PUT', 
                path: '/api/payments/{id}', 
                description: 'Update payment', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    invoiceId: "invoice123",
                    amount: 5500.00,
                    paymentMethod: "Bank Transfer",
                    paymentDate: "2024-01-15T10:30:00Z",
                    reference: "PAY-2024-001-UPDATED",
                    status: "Completed"
                }
            },
            { 
                method: 'DELETE', 
                path: '/api/payments/{id}', 
                description: 'Delete payment', 
                requiresBody: false, 
                hasId: true 
            }
        ]
    },
    auditlogs: {
        name: 'Audit Logs',
        icon: 'fas fa-clipboard-list',
        color: 'dark',
        description: 'System audit and activity logging',
        endpoints: [
            { 
                method: 'POST', 
                path: '/api/auditlogs', 
                description: 'Create audit log entry', 
                requiresBody: true,
                sampleBody: {
                    logType: "UserAction",
                    title: "User Login",
                    description: "User successfully logged into the system",
                    userId: "user123",
                    entityId: "session456"
                }
            },
            { 
                method: 'GET', 
                path: '/api/auditlogs', 
                description: 'Get all audit logs (with limit)', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/auditlogs/{id}', 
                description: 'Get audit log by ID', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/auditlogs/search', 
                description: 'Search audit logs', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/auditlogs/by-entity/{entityId}', 
                description: 'Get audit logs by entity', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/auditlogs/types', 
                description: 'Get available audit log types', 
                requiresBody: false 
            }
        ]
    },
    clients: {
        name: 'Client Portal',
        icon: 'fas fa-building',
        color: 'info',
        description: 'Client-specific functionality',
        endpoints: [
            { 
                method: 'GET', 
                path: '/api/clients/projects', 
                description: 'Get client projects', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/clients/project/{id}', 
                description: 'Get project by ID', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/clients/project/{id}/phases', 
                description: 'Get project phases', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/clients/project/{id}/tasks', 
                description: 'Get project tasks', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/clients/project/{id}/documents', 
                description: 'Get project documents', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/clients/project/{id}/messages', 
                description: 'Get project messages', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/clients/project/{id}/notifications', 
                description: 'Get project notifications', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/clients/project/{id}/payments', 
                description: 'Get project payments', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/clients/project/{id}/quotations', 
                description: 'Get project quotations', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/clients/project/{id}/invoices', 
                description: 'Get project invoices', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/clients/project/{id}/estimates', 
                description: 'Get project estimates', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/clients/project/{id}/status', 
                description: 'Get project status', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/clients/project/{id}/message', 
                description: 'Send project message', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    subject: "Project Question",
                    content: "I have a question about the project timeline",
                    priority: "Normal"
                }
            },
            { 
                method: 'POST', 
                path: '/api/clients/project/{id}/feedback', 
                description: 'Submit project feedback', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    rating: 5,
                    comment: "Excellent work on the project!",
                    category: "General"
                }
            },
            { 
                method: 'PUT', 
                path: '/api/clients/project/{id}/approve-phase/{phaseId}', 
                description: 'Approve project phase', 
                requiresBody: false, 
                hasId: true 
            }
        ]
    },
    contractors: {
        name: 'Contractor Portal',
        icon: 'fas fa-tools',
        color: 'warning',
        description: 'Contractor-specific functionality',
        endpoints: [
            { 
                method: 'GET', 
                path: '/api/contractors/project/tasks', 
                description: 'Get assigned tasks', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/contractors/project/phases', 
                description: 'Get assigned phases', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/contractors/project/documents', 
                description: 'Get project documents', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/contractors/project/messages', 
                description: 'Get project messages', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/contractors/project/notifications', 
                description: 'Get project notifications', 
                requiresBody: false 
            },
            { 
                method: 'POST', 
                path: '/api/contractors/task/{id}/update-status', 
                description: 'Update task status', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    status: "InProgress",
                    progress: 50,
                    notes: "Task is 50% complete"
                }
            }
        ]
    },
    projectmanager: {
        name: 'Project Manager',
        icon: 'fas fa-project-diagram',
        color: 'success',
        description: 'Project management and oversight',
        endpoints: [
            { 
                method: 'GET', 
                path: '/api/projectmanager/projects', 
                description: 'Get managed projects', 
                requiresBody: false 
            },
            { 
                method: 'GET', 
                path: '/api/projectmanager/project/{id}', 
                description: 'Get project by ID', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/projectmanager/project/{id}/phases', 
                description: 'Get project phases', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/projectmanager/project/{id}/tasks', 
                description: 'Get project tasks', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/projectmanager/project/{id}/documents', 
                description: 'Get project documents', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/projectmanager/project/{id}/messages', 
                description: 'Get project messages', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/projectmanager/project/{id}/notifications', 
                description: 'Get project notifications', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/projectmanager/project/{id}/payments', 
                description: 'Get project payments', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/projectmanager/project/{id}/quotations', 
                description: 'Get project quotations', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/projectmanager/project/{id}/invoices', 
                description: 'Get project invoices', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/projectmanager/project/{id}/estimates', 
                description: 'Get project estimates', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'GET', 
                path: '/api/projectmanager/project/{id}/status', 
                description: 'Get project status', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'POST', 
                path: '/api/projectmanager/create/project', 
                description: 'Create new project', 
                requiresBody: true,
                sampleBody: {
                    name: "Website Development",
                    description: "Complete website development project",
                    clientId: "client123",
                    startDate: "2024-01-01T00:00:00Z",
                    endDate: "2024-06-30T23:59:59Z",
                    budget: 50000.00,
                    status: "Planning"
                }
            },
            { 
                method: 'POST', 
                path: '/api/projectmanager/create/project/{projectId}/phase', 
                description: 'Create project phase', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    name: "Design Phase",
                    description: "UI/UX design and wireframing",
                    startDate: "2024-01-01T00:00:00Z",
                    endDate: "2024-02-15T23:59:59Z",
                    assignedTo: "contractor123",
                    status: "NotStarted"
                }
            },
            { 
                method: 'POST', 
                path: '/api/projectmanager/create/project/{projectId}/task', 
                description: 'Create project task', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    name: "Create wireframes",
                    description: "Design wireframes for all pages",
                    phaseId: "phase123",
                    assignedTo: "contractor456",
                    priority: "High",
                    estimatedHours: 40,
                    status: "NotStarted"
                }
            },
            { 
                method: 'POST', 
                path: '/api/projectmanager/create/project/{projectId}/document', 
                description: 'Create project document', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    name: "Project Requirements",
                    type: "PDF",
                    url: "https://example.com/requirements.pdf",
                    description: "Detailed project requirements document"
                }
            },
            { 
                method: 'PUT', 
                path: '/api/projectmanager/update/project/{id}', 
                description: 'Update project', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    name: "Updated Website Development",
                    description: "Updated complete website development project",
                    clientId: "client123",
                    startDate: "2024-01-01T00:00:00Z",
                    endDate: "2024-07-31T23:59:59Z",
                    budget: 60000.00,
                    status: "InProgress"
                }
            },
            { 
                method: 'PUT', 
                path: '/api/projectmanager/update/phase/{id}', 
                description: 'Update phase', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    name: "Updated Design Phase",
                    description: "Updated UI/UX design and wireframing",
                    startDate: "2024-01-01T00:00:00Z",
                    endDate: "2024-02-28T23:59:59Z",
                    assignedTo: "contractor123",
                    status: "InProgress"
                }
            },
            { 
                method: 'PUT', 
                path: '/api/projectmanager/update/task/{id}', 
                description: 'Update task', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    name: "Updated Create wireframes",
                    description: "Updated design wireframes for all pages",
                    phaseId: "phase123",
                    assignedTo: "contractor456",
                    priority: "High",
                    estimatedHours: 50,
                    status: "InProgress"
                }
            },
            { 
                method: 'PUT', 
                path: '/api/projectmanager/update/document/{id}', 
                description: 'Update document', 
                requiresBody: true, 
                hasId: true,
                sampleBody: {
                    name: "Updated Project Requirements",
                    type: "PDF",
                    url: "https://example.com/requirements-updated.pdf",
                    description: "Updated detailed project requirements document"
                }
            },
            { 
                method: 'PUT', 
                path: '/api/projectmanager/approve/document/{id}', 
                description: 'Approve document', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'DELETE', 
                path: '/api/projectmanager/delete/project/{id}', 
                description: 'Delete project', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'DELETE', 
                path: '/api/projectmanager/delete/phase/{id}', 
                description: 'Delete phase', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'DELETE', 
                path: '/api/projectmanager/delete/task/{id}', 
                description: 'Delete task', 
                requiresBody: false, 
                hasId: true 
            },
            { 
                method: 'DELETE', 
                path: '/api/projectmanager/delete/document/{id}', 
                description: 'Delete document', 
                requiresBody: false, 
                hasId: true 
            }
        ]
    },
    users: {
        name: 'User Management',
        icon: 'fas fa-users',
        color: 'primary',
        description: 'User profile and management',
        endpoints: [
            { 
                method: 'GET', 
                path: '/api/users/profile', 
                description: 'Get current user profile', 
                requiresBody: false 
            }
        ]
    }
};

// Initialize the interface
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 API Testing Dashboard loaded successfully!');
    
    // Category selection
    document.querySelectorAll('[data-category]').forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            const category = this.getAttribute('data-category');
            showCategory(category);
        });
    });
    
    // Load saved payloads from localStorage
    loadSavedPayloads();
    
    // Load and display custom ID badges
    loadCustomIdBadges();
});

function loadSavedPayloads() {
    const saved = localStorage.getItem('apiTestEditedPayloads');
    if (saved) {
        try {
            editedPayloads = JSON.parse(saved);
            console.log('📦 Loaded saved payloads:', Object.keys(editedPayloads).length);
        } catch (error) {
            console.warn('Failed to load saved payloads:', error);
        }
    }
}

function savePayloadsToStorage() {
    localStorage.setItem('apiTestEditedPayloads', JSON.stringify(editedPayloads));
}

function loadCustomIdBadges() {
    // Check all localStorage keys for custom IDs
    Object.keys(localStorage).forEach(key => {
        if (key.startsWith('id-')) {
            // Extract method and path from key
            const parts = key.replace('id-', '').split(':');
            if (parts.length === 2) {
                const method = parts[0];
                const path = parts[1];
                
                // Find the corresponding badge and show it
                const badgeId = `customIdBadge-${getCategoryFromPath(path)}-${path.replace(/\//g, '-')}`;
                const badge = document.getElementById(badgeId);
                if (badge) {
                    badge.classList.remove('d-none');
                }
            }
        }
    });
}

function getCategoryFromPath(path) {
    // Simple mapping to determine category from path
    if (path.includes('/auth/')) return 'auth';
    if (path.includes('/users/')) return 'users';
    if (path.includes('/projects/')) return 'projects';
    if (path.includes('/quotations/')) return 'quotations';
    if (path.includes('/invoices/')) return 'invoices';
    if (path.includes('/contractors/')) return 'contractors';
    if (path.includes('/clients/')) return 'clients';
    if (path.includes('/documents/')) return 'documents';
    if (path.includes('/estimates/')) return 'estimates';
    if (path.includes('/messages/')) return 'messages';
    if (path.includes('/notifications/')) return 'notifications';
    if (path.includes('/payments/')) return 'payments';
    if (path.includes('/audit-logs/')) return 'audit-logs';
    if (path.includes('/admin/')) return 'admin';
    if (path.includes('/project-manager/')) return 'project-manager';
    return 'unknown';
}

function clearAllEditedPayloads() {
    if (confirm('Are you sure you want to reset all edited payloads and IDs? This will restore all endpoints to their sample data.')) {
        editedPayloads = {};
        localStorage.removeItem('apiTestEditedPayloads');
        
        // Clear all saved IDs
        Object.keys(localStorage).forEach(key => {
            if (key.startsWith('id-')) {
                localStorage.removeItem(key);
            }
        });
        
        // Hide all edited badges
        document.querySelectorAll('[id^="editedBadge-"]').forEach(badge => {
            badge.classList.add('d-none');
        });
        
        // Hide all custom ID badges
        document.querySelectorAll('[id^="customIdBadge-"]').forEach(badge => {
            badge.classList.add('d-none');
        });
        
        showValidationMessage('All payloads and IDs reset to sample data!', 'info');
        console.log('🔄 All edited payloads and IDs cleared');
    }
}

function showCategory(category) {
    const categoryData = apiEndpoints[category];
    if (!categoryData) return;
    
    // Update header
    document.getElementById('selected-category-title').innerHTML = 
        `<i class="${categoryData.icon} me-2 text-${categoryData.color}"></i>${categoryData.name}`;
    
    // Generate endpoints HTML
    let endpointsHtml = `
        <div class="mb-4">
            <h5 class="text-${categoryData.color} mb-3">
                <i class="${categoryData.icon} me-2"></i>${categoryData.name}
            </h5>
            <p class="text-muted mb-4">${categoryData.description}</p>
        </div>
        <div class="row">
    `;
    
    categoryData.endpoints.forEach(endpoint => {
        const methodColor = getMethodColor(endpoint.method);
        const hasId = endpoint.hasId ? ' (requires ID)' : '';
        
        endpointsHtml += `
            <div class="col-md-6 mb-4">
                <div class="card border-0 shadow-sm rounded-3 h-100">
                    <div class="card-header bg-light border-0 py-3">
                        <div class="d-flex align-items-center justify-content-between">
                            <span class="badge bg-${methodColor} method-badge">${endpoint.method}</span>
                            <small class="text-muted">${endpoint.path}${hasId}</small>
                        </div>
                    </div>
                    <div class="card-body">
                        <h6 class="card-title">${endpoint.description}</h6>
                        <p class="card-text text-muted small">${endpoint.path}</p>
                        ${endpoint.requiresBody ? `
                            <div class="mt-3">
                                <button class="btn btn-outline-primary btn-sm" onclick="showPayloadEditor('${category}', '${endpoint.path}', '${endpoint.method}')" id="editBtn-${category}-${endpoint.path.replace(/\//g, '-')}">
                                    <i class="fas fa-edit me-1"></i>Edit Payload
                                </button>
                                <button class="btn btn-outline-secondary btn-sm ms-2" onclick="showSampleBody('${category}', '${endpoint.path}')">
                                    <i class="fas fa-code me-1"></i>View Sample
                                </button>
                                <span class="badge bg-success ms-2 d-none" id="editedBadge-${category}-${endpoint.path.replace(/\//g, '-')}">
                                    <i class="fas fa-check me-1"></i>Edited
                                </span>
                                <span class="badge bg-info ms-2 d-none" id="customIdBadge-${category}-${endpoint.path.replace(/\//g, '-')}">
                                    <i class="fas fa-id-card me-1"></i>Custom ID
                                </span>
                            </div>
                        ` : ''}
                        <div class="mt-3">
                            <button class="btn btn-primary btn-sm" onclick="testEndpoint('${endpoint.path}', '${endpoint.method}', '${category}')">
                                <i class="fas fa-play me-1"></i>Test Endpoint
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    });
    
    endpointsHtml += '</div>';
    
    document.getElementById('endpoints-content').innerHTML = endpointsHtml;
}

function getMethodColor(method) {
    switch(method) {
        case 'GET': return 'success';
        case 'POST': return 'primary';
        case 'PUT': return 'warning';
        case 'DELETE': return 'danger';
        default: return 'secondary';
    }
}

// Global variables for payload editor
let currentEndpoint = null;
let currentCategory = null;
let currentMethod = null;
let currentPath = null;
let editedPayloads = {}; // Store edited payloads

function testEndpoint(path, method, category) {
    const categoryData = apiEndpoints[category];
    const endpoint = categoryData.endpoints.find(e => e.path === path && e.method === method);
    
    if (!endpoint) return;
    
    let requestBody = '';
    
    // Check if we have an edited payload for this endpoint
    const payloadKey = `${method}:${path}`;
    if (editedPayloads[payloadKey]) {
        requestBody = editedPayloads[payloadKey];
    } else if (endpoint.requiresBody && endpoint.sampleBody) {
        requestBody = JSON.stringify(endpoint.sampleBody, null, 2);
    }
    
    // Get custom ID or use default
    let customId = 'sample123';
    if (path.includes('{id}')) {
        const idKey = `id-${method}:${path}`;
        customId = localStorage.getItem(idKey) || 'sample123';
    }
    
    // Replace {id} with custom ID
    const actualPath = path.replace('{id}', customId);
    
    console.log(`🧪 Testing ${method} ${actualPath}`);
    console.log(`🆔 Using ID: ${customId}`);
    
    // Make the API call
    fetch('/Testing/TestEndpoint', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
        },
        body: new URLSearchParams({
            endpoint: actualPath,
            method: method,
            requestBody: requestBody
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log(`✅ ${method} ${actualPath} - Success (${data.statusCode})`);
            console.log('Response:', data.responseBody);
        } else {
            console.log(`❌ ${method} ${actualPath} - Failed (${data.statusCode})`);
            console.log('Error:', data.message);
        }
    })
    .catch(error => {
        console.log(`❌ ${method} ${actualPath} - Error`);
        console.error('Error:', error);
    });
}

function showPayloadEditor(category, path, method) {
    const categoryData = apiEndpoints[category];
    const endpoint = categoryData.endpoints.find(e => e.path === path && e.method === method);
    
    if (!endpoint) return;
    
    // Store current context
    currentCategory = category;
    currentPath = path;
    currentMethod = method;
    currentEndpoint = endpoint;
    
    // Update modal content
    document.getElementById('modalMethod').textContent = method;
    document.getElementById('modalEndpoint').textContent = path;
    document.getElementById('modalDescription').textContent = endpoint.description;
    
    // Show/hide ID input section based on whether path contains {id}
    const idInputSection = document.getElementById('idInputSection');
    const hasId = path.includes('{id}');
    if (hasId) {
        idInputSection.style.display = 'block';
        // Load saved ID or use default
        const idKey = `id-${method}:${path}`;
        const savedId = localStorage.getItem(idKey) || 'sample123';
        document.getElementById('customIdInput').value = savedId;
    } else {
        idInputSection.style.display = 'none';
    }
    
    // Load payload
    const payloadKey = `${method}:${path}`;
    let payload = '';
    
    if (editedPayloads[payloadKey]) {
        payload = editedPayloads[payloadKey];
    } else if (endpoint.sampleBody) {
        payload = JSON.stringify(endpoint.sampleBody, null, 2);
    }
    
    document.getElementById('payloadEditor').value = payload;
    
    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('payloadEditorModal'));
    modal.show();
}

function formatJSON() {
    const textarea = document.getElementById('payloadEditor');
    try {
        const obj = JSON.parse(textarea.value);
        textarea.value = JSON.stringify(obj, null, 2);
        showValidationMessage('JSON formatted successfully!', 'success');
    } catch (error) {
        showValidationMessage('Invalid JSON format: ' + error.message, 'danger');
    }
}

function validateJSON() {
    const textarea = document.getElementById('payloadEditor');
    try {
        JSON.parse(textarea.value);
        showValidationMessage('JSON is valid!', 'success');
    } catch (error) {
        showValidationMessage('Invalid JSON: ' + error.message, 'danger');
    }
}

function loadSamplePayload() {
    if (currentEndpoint && currentEndpoint.sampleBody) {
        const payload = JSON.stringify(currentEndpoint.sampleBody, null, 2);
        document.getElementById('payloadEditor').value = payload;
        showValidationMessage('Reset to sample payload', 'info');
    }
}

function savePayload() {
    const payload = document.getElementById('payloadEditor').value;
    const payloadKey = `${currentMethod}:${currentPath}`;
    editedPayloads[payloadKey] = payload;
    
    // Save custom ID if applicable
    if (currentPath.includes('{id}')) {
        const customId = document.getElementById('customIdInput').value;
        const idKey = `id-${currentMethod}:${currentPath}`;
        localStorage.setItem(idKey, customId);
        
        // Show custom ID badge
        const customIdBadgeId = `customIdBadge-${currentCategory}-${currentPath.replace(/\//g, '-')}`;
        const customIdBadge = document.getElementById(customIdBadgeId);
        if (customIdBadge) {
            customIdBadge.classList.remove('d-none');
        }
    }
    
    // Save to localStorage
    savePayloadsToStorage();
    
    // Show edited badge
    const badgeId = `editedBadge-${currentCategory}-${currentPath.replace(/\//g, '-')}`;
    const badge = document.getElementById(badgeId);
    if (badge) {
        badge.classList.remove('d-none');
    }
    
    // Update edit button text
    const editBtnId = `editBtn-${currentCategory}-${currentPath.replace(/\//g, '-')}`;
    const editBtn = document.getElementById(editBtnId);
    if (editBtn) {
        editBtn.innerHTML = '<i class="fas fa-edit me-1"></i>Edit Payload';
        editBtn.classList.remove('btn-success');
        editBtn.classList.add('btn-outline-primary');
    }
    
    // Close modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('payloadEditorModal'));
    modal.hide();
    
    showValidationMessage('Payload and ID saved successfully!', 'success');
}

function saveAndTestPayload() {
    savePayload();
    
    // Test the endpoint with the edited payload
    setTimeout(() => {
        testEndpoint(currentPath, currentMethod, currentCategory);
    }, 500);
}

// Helper functions for sample data
function generateRandomId() {
    const randomId = 'id_' + Math.random().toString(36).substr(2, 9);
    document.getElementById('customIdInput').value = randomId;
    showValidationMessage(`Generated ID: ${randomId}`, 'info');
}

function insertSampleId() {
    const customId = document.getElementById('customIdInput').value || 'sample123';
    insertTextAtCursor(`"${customId}"`);
}

function insertCurrentDate() {
    const now = new Date().toISOString();
    insertTextAtCursor(`"${now}"`);
}

function insertSampleEmail() {
    insertTextAtCursor('"user@example.com"');
}

function insertSampleAmount() {
    insertTextAtCursor('1500.00');
}

function insertTextAtCursor(text) {
    const textarea = document.getElementById('payloadEditor');
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const value = textarea.value;
    
    textarea.value = value.substring(0, start) + text + value.substring(end);
    textarea.selectionStart = textarea.selectionEnd = start + text.length;
    textarea.focus();
}

function showValidationMessage(message, type) {
    // Create a temporary alert
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(alertDiv);
    
    // Auto-remove after 3 seconds
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.parentNode.removeChild(alertDiv);
        }
    }, 3000);
}

function showSampleBody(category, path) {
    const categoryData = apiEndpoints[category];
    const endpoint = categoryData.endpoints.find(e => e.path === path);
    
    if (endpoint && endpoint.sampleBody) {
        const sampleJson = JSON.stringify(endpoint.sampleBody, null, 2);
        console.log(`📋 Sample Body for ${path}:`);
        console.log(sampleJson);
        
        // You could also show this in a modal or alert
        alert(`Sample Body for ${path}:\n\n${sampleJson}`);
    }
}

function clearConsoleOutput() {
    document.getElementById('console-output').innerHTML = '<div class="text-muted opacity-75">Console output cleared...</div>';
}

function copyConsoleOutput() {
    const consoleText = document.getElementById('console-output').textContent;
    navigator.clipboard.writeText(consoleText).then(() => {
        console.log('Console output copied to clipboard');
    });
}

// Override console methods to capture output
const originalConsoleLog = console.log;
const originalConsoleError = console.error;
const originalConsoleWarn = console.warn;
const originalConsoleInfo = console.info;

function captureConsoleMessage(type, args) {
    const timestamp = new Date().toLocaleTimeString();
    const message = args.map(arg => typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)).join(' ');
    
    const consoleOutput = document.getElementById('console-output');
    if (consoleOutput) {
        const messageElement = document.createElement('div');
        messageElement.className = `mb-1 text-${type === 'error' ? 'danger' : type === 'warn' ? 'warning' : 'light'}`;
        messageElement.innerHTML = `<span class="text-muted">[${timestamp}]</span> ${message}`;
        
        consoleOutput.appendChild(messageElement);
        consoleOutput.scrollTop = consoleOutput.scrollHeight;
    }
}

console.log = function(...args) {
    captureConsoleMessage('log', args);
    originalConsoleLog.apply(console, args);
};

console.error = function(...args) {
    captureConsoleMessage('error', args);
    originalConsoleError.apply(console, args);
};

console.warn = function(...args) {
    captureConsoleMessage('warn', args);
    originalConsoleWarn.apply(console, args);
};

console.info = function(...args) {
    captureConsoleMessage('info', args);
    originalConsoleInfo.apply(console, args);
};
</script>
