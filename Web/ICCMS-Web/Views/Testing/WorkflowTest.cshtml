@{
    ViewData["Title"] = "AI Workflow Testing Dashboard";
}

<style>
.bg-gradient-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.bg-gradient-success {
    background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
}

.bg-gradient-info {
    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
}

.bg-gradient-warning {
    background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
}

.workflow-step {
    transition: all 0.3s ease;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    background: white;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.workflow-step.active {
    border-color: #007bff;
    background: linear-gradient(135deg, #f8f9ff 0%, #e3f2fd 100%);
    box-shadow: 0 4px 20px rgba(0,123,255,0.2);
}

.workflow-step.completed {
    border-color: #28a745;
    background: linear-gradient(135deg, #f0fff4 0%, #e8f5e8 100%);
}

.workflow-step.error {
    border-color: #dc3545;
    background: linear-gradient(135deg, #fff5f5 0%, #ffeaea 100%);
}

.step-number {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #6c757d;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    margin-right: 1rem;
    flex-shrink: 0;
}

.step-number.active {
    background: #007bff;
}

.step-number.completed {
    background: #28a745;
}

.step-number.error {
    background: #dc3545;
}

.btn-workflow {
    border-radius: 25px;
    font-weight: 600;
    padding: 0.75rem 2rem;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-size: 0.9rem;
}

.btn-workflow:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.2);
}

.response-box {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
    max-height: 300px;
    overflow-y: auto;
    font-family: 'Courier New', monospace;
    font-size: 0.85rem;
}

.status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
}

.status-draft { background: #fff3cd; color: #856404; }
.status-pending { background: #cce5ff; color: #004085; }
.status-approved { background: #d4edda; color: #155724; }
.status-rejected { background: #f8d7da; color: #721c24; }

.material-item {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    transition: all 0.2s ease;
}

.material-item:hover {
    border-color: #007bff;
    box-shadow: 0 2px 8px rgba(0,123,255,0.1);
}

.workflow-progress {
    height: 8px;
    background: #e9ecef;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 2rem;
}

.workflow-progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #007bff, #28a745);
    transition: width 0.5s ease;
    border-radius: 4px;
}

.alert-workflow {
    border: none;
    border-radius: 12px;
    border-left: 4px solid;
    margin-bottom: 1rem;
}

.alert-info { border-left-color: #17a2b8; background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%); }
.alert-success { border-left-color: #28a745; background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%); }
.alert-warning { border-left-color: #ffc107; background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%); }
.alert-danger { border-left-color: #dc3545; background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%); }
</style>

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0 text-primary">
                        <i class="fas fa-robot me-2"></i>
                        AI Workflow Testing Dashboard
                    </h1>
                    <p class="text-muted mb-0">Test the complete Estimate → Quotation → Invoice workflow</p>
                </div>
                <div class="text-end">
                    <span class="badge bg-primary fs-6">Tester Role</span>
                </div>
            </div>

            <!-- Workflow Progress -->
            <div class="workflow-progress">
                <div class="workflow-progress-bar" id="workflowProgress" style="width: 0%"></div>
            </div>

            <!-- Step 1: Process Blueprint to Estimate -->
            <div class="workflow-step" id="step1">
                <div class="d-flex align-items-center mb-3">
                    <div class="step-number active" id="step1Number">1</div>
                    <div>
                        <h4 class="mb-1">Process Blueprint to AI Estimate</h4>
                        <p class="text-muted mb-0">Upload blueprint and generate AI-powered estimate with line items</p>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Blueprint URL</label>
                            <input type="text" class="form-control" id="blueprintUrl" 
                                   value="https://example.com/construction-blueprint.pdf" 
                                   placeholder="Enter blueprint URL">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Project ID</label>
                            <input type="text" class="form-control" id="projectId" 
                                   value="project123" placeholder="Enter project ID">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Contractor ID</label>
                            <input type="text" class="form-control" id="contractorId" 
                                   value="contractor789" placeholder="Enter contractor ID">
                        </div>
                        <button class="btn btn-primary btn-workflow" onclick="processBlueprint()">
                            <i class="fas fa-robot me-2"></i>Process Blueprint
                        </button>
                    </div>
                    <div class="col-md-6">
                        <div class="response-box" id="step1Response">
                            <div class="text-muted">Click "Process Blueprint" to generate AI estimate...</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step 2: Review and Edit Estimate -->
            <div class="workflow-step" id="step2">
                <div class="d-flex align-items-center mb-3">
                    <div class="step-number" id="step2Number">2</div>
                    <div>
                        <h4 class="mb-1">Review AI-Generated Line Items</h4>
                        <p class="text-muted mb-0">Review and edit the AI-generated estimate line items</p>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12">
                        <div id="estimateLineItems">
                            <div class="text-muted text-center py-4">
                                <i class="fas fa-info-circle me-2"></i>
                                Complete Step 1 to see AI-generated line items
                            </div>
                        </div>
                        <div class="text-end mt-3">
                            <button class="btn btn-success btn-workflow" onclick="convertToQuotation()" id="convertBtn" disabled>
                                <i class="fas fa-arrow-right me-2"></i>Convert to Quotation
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step 3: Create Quotation from Estimate -->
            <div class="workflow-step" id="step3">
                <div class="d-flex align-items-center mb-3">
                    <div class="step-number" id="step3Number">3</div>
                    <div>
                        <h4 class="mb-1">Create Quotation</h4>
                        <p class="text-muted mb-0">Convert estimate to quotation and prepare for PM review</p>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Client ID</label>
                            <input type="text" class="form-control" id="clientId" 
                                   value="client456" placeholder="Enter client ID">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Quotation Description</label>
                            <textarea class="form-control" id="quotationDescription" rows="3" 
                                      placeholder="Enter quotation description">AI-generated quotation from blueprint analysis</textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Valid Until</label>
                            <input type="datetime-local" class="form-control" id="validUntil" 
                                   value="@DateTime.Now.AddDays(30).ToString("yyyy-MM-ddTHH:mm")">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="response-box" id="step3Response">
                            <div class="text-muted">Complete previous steps to create quotation...</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step 4: PM Review and Approval -->
            <div class="workflow-step" id="step4">
                <div class="d-flex align-items-center mb-3">
                    <div class="step-number" id="step4Number">4</div>
                    <div>
                        <h4 class="mb-1">PM Review & Approval</h4>
                        <p class="text-muted mb-0">Project Manager reviews and approves the quotation</p>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">PM Action</label>
                            <select class="form-select" id="pmAction">
                                <option value="">Select PM action...</option>
                                <option value="edit">Edit Quotation Items</option>
                                <option value="approve">Approve & Send to Client</option>
                                <option value="reject">Reject Quotation</option>
                            </select>
                        </div>
                        <div class="mb-3" id="editSection" style="display: none;">
                            <label class="form-label">Edit Notes</label>
                            <textarea class="form-control" id="pmEditNotes" rows="3" 
                                      placeholder="Enter PM edit notes..."></textarea>
                        </div>
                        <div class="mb-3" id="rejectSection" style="display: none;">
                            <label class="form-label">Rejection Reason</label>
                            <textarea class="form-control" id="pmRejectReason" rows="3" 
                                      placeholder="Enter reason for rejection..."></textarea>
                        </div>
                        <button class="btn btn-warning btn-workflow" onclick="pmReview()" id="pmReviewBtn" disabled>
                            <i class="fas fa-user-check me-2"></i>PM Review
                        </button>
                    </div>
                    <div class="col-md-6">
                        <div class="response-box" id="step4Response">
                            <div class="text-muted">Complete previous steps for PM review...</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step 5: Client Decision -->
            <div class="workflow-step" id="step5">
                <div class="d-flex align-items-center mb-3">
                    <div class="step-number" id="step5Number">5</div>
                    <div>
                        <h4 class="mb-1">Client Decision</h4>
                        <p class="text-muted mb-0">Client reviews and makes decision on quotation</p>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Client Decision</label>
                            <select class="form-select" id="clientDecision">
                                <option value="">Select client decision...</option>
                                <option value="accept">Accept Quotation</option>
                                <option value="decline">Decline Quotation</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Client Notes</label>
                            <textarea class="form-control" id="clientNotes" rows="3" 
                                      placeholder="Enter client notes..."></textarea>
                        </div>
                        <button class="btn btn-info btn-workflow" onclick="clientDecision()" id="clientDecisionBtn" disabled>
                            <i class="fas fa-handshake me-2"></i>Client Decision
                        </button>
                    </div>
                    <div class="col-md-6">
                        <div class="response-box" id="step5Response">
                            <div class="text-muted">Complete previous steps for client decision...</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step 6: Generate Invoice -->
            <div class="workflow-step" id="step6">
                <div class="d-flex align-items-center mb-3">
                    <div class="step-number" id="step6Number">6</div>
                    <div>
                        <h4 class="mb-1">Generate Invoice</h4>
                        <p class="text-muted mb-0">Create invoice from approved quotation</p>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Invoice Number</label>
                            <input type="text" class="form-control" id="invoiceNumber" 
                                   value="INV-2024-001" placeholder="Enter invoice number">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Due Date</label>
                            <input type="datetime-local" class="form-control" id="dueDate" 
                                   value="@DateTime.Now.AddDays(30).ToString("yyyy-MM-ddTHH:mm")">
                        </div>
                        <button class="btn btn-success btn-workflow" onclick="generateInvoice()" id="generateInvoiceBtn" disabled>
                            <i class="fas fa-file-invoice me-2"></i>Generate Invoice
                        </button>
                    </div>
                    <div class="col-md-6">
                        <div class="response-box" id="step6Response">
                            <div class="text-muted">Complete previous steps to generate invoice...</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Workflow Summary -->
            <div class="workflow-step" id="summary">
                <div class="d-flex align-items-center mb-3">
                    <div class="step-number" id="summaryNumber">✓</div>
                    <div>
                        <h4 class="mb-1">Workflow Summary</h4>
                        <p class="text-muted mb-0">Complete workflow status and generated documents</p>
                    </div>
                </div>

                <div class="row" id="workflowSummary">
                    <div class="col-12">
                        <div class="text-muted text-center py-4">
                            <i class="fas fa-info-circle me-2"></i>
                            Complete the workflow to see summary
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Quotation Items Modal -->
<div class="modal fade" id="editQuotationModal" tabindex="-1" aria-labelledby="editQuotationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editQuotationModalLabel">
                    <i class="fas fa-edit me-2"></i>Edit Quotation Items
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Quotation Items</label>
                    <div id="quotationItemsList">
                        <!-- Items will be populated here -->
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-primary mt-2" onclick="addQuotationItem()">
                        <i class="fas fa-plus me-1"></i>Add Item
                    </button>
                </div>
                <div class="mb-3">
                    <label class="form-label">Edit Notes</label>
                    <textarea class="form-control" id="modalEditNotes" rows="3" 
                              placeholder="Enter notes about the changes made..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveQuotationEdits()">
                    <i class="fas fa-save me-2"></i>Save Changes
                </button>
            </div>
        </div>
    </div>
</div>

<script>
let currentEstimateId = null;
let currentQuotationId = null;
let currentInvoiceId = null;
let workflowData = {};

// Update workflow progress
function updateProgress(step) {
    const progress = (step / 6) * 100;
    document.getElementById('workflowProgress').style.width = progress + '%';
}

// Mark step as completed
function markStepCompleted(stepNumber) {
    const step = document.getElementById(`step${stepNumber}`);
    const stepNumberEl = document.getElementById(`step${stepNumber}Number`);
    
    step.classList.remove('active', 'error');
    step.classList.add('completed');
    stepNumberEl.classList.remove('active', 'error');
    stepNumberEl.classList.add('completed');
    
    updateProgress(stepNumber);
}

// Mark step as error
function markStepError(stepNumber) {
    const step = document.getElementById(`step${stepNumber}`);
    const stepNumberEl = document.getElementById(`step${stepNumber}Number`);
    
    step.classList.remove('active', 'completed');
    step.classList.add('error');
    stepNumberEl.classList.remove('active', 'completed');
    stepNumberEl.classList.add('error');
}

// Mark step as active
function markStepActive(stepNumber) {
    const step = document.getElementById(`step${stepNumber}`);
    const stepNumberEl = document.getElementById(`step${stepNumber}Number`);
    
    step.classList.remove('completed', 'error');
    step.classList.add('active');
    stepNumberEl.classList.remove('completed', 'error');
    stepNumberEl.classList.add('active');
}

// Show response in step
function showResponse(stepNumber, response, isError = false) {
    const responseEl = document.getElementById(`step${stepNumber}Response`);
    responseEl.innerHTML = `<pre>${JSON.stringify(response, null, 2)}</pre>`;
    
    if (isError) {
        responseEl.style.borderColor = '#dc3545';
        responseEl.style.backgroundColor = '#f8d7da';
    } else {
        responseEl.style.borderColor = '#28a745';
        responseEl.style.backgroundColor = '#d4edda';
    }
}

// Step 1: Process Blueprint
async function processBlueprint() {
    try {
        markStepActive(1);
        
        const requestData = {
            blueprintUrl: document.getElementById('blueprintUrl').value,
            projectId: document.getElementById('projectId').value,
            contractorId: document.getElementById('contractorId').value
        };

        const response = await fetch('https://localhost:7136/api/estimates/process-blueprint', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + await getAuthToken()
            },
            body: JSON.stringify(requestData)
        });

        let result;
        const responseText = await response.text();
        
        console.log('Process Blueprint - API Response Status:', response.status);
        console.log('Process Blueprint - API Response Headers:', response.headers);
        console.log('Process Blueprint - API Response Text:', responseText);
        console.log('Process Blueprint - Request URL:', 'https://localhost:7136/api/estimates/process-blueprint');
        console.log('Process Blueprint - Request Headers:', {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + await getAuthToken()
        });
        
        if (responseText) {
            try {
                result = JSON.parse(responseText);
            } catch (parseError) {
                console.error('Process Blueprint - JSON Parse Error:', parseError);
                throw new Error(`Invalid JSON response: ${responseText}`);
            }
        } else {
            result = { message: 'Empty response from server' };
        }
        
        if (response.ok) {
            currentEstimateId = result.estimateId;
            workflowData.estimate = result;
            
            showResponse(1, result);
            displayEstimateLineItems(result.lineItems);
            markStepCompleted(1);
            
            // Enable next step
            document.getElementById('convertBtn').disabled = false;
            markStepActive(2);
        } else {
            throw new Error(result.message || 'Failed to process blueprint');
        }
    } catch (error) {
        showResponse(1, { error: error.message }, true);
        markStepError(1);
    }
}

// Display estimate line items
function displayEstimateLineItems(lineItems) {
    const container = document.getElementById('estimateLineItems');
    
    if (!lineItems || lineItems.length === 0) {
        container.innerHTML = '<div class="text-muted text-center py-4">No line items found</div>';
        return;
    }

    let html = '<div class="row">';
    lineItems.forEach((item, index) => {
        html += `
            <div class="col-md-6 mb-3">
                <div class="material-item">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <h6 class="mb-1">${item.name}</h6>
                        <span class="status-badge status-draft">AI Generated</span>
                    </div>
                    <p class="text-muted small mb-2">${item.description}</p>
                    <div class="row">
                        <div class="col-6">
                            <small class="text-muted">Quantity: ${item.quantity} ${item.unit}</small>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">Unit Price: R${item.unitPrice.toFixed(2)}</small>
                        </div>
                    </div>
                    <div class="mt-2">
                        <strong>Line Total: R${item.lineTotal.toFixed(2)}</strong>
                    </div>
                    ${item.isAiGenerated ? `<div class="mt-1"><small class="text-info">AI Confidence: ${(item.aiConfidence * 100).toFixed(1)}%</small></div>` : ''}
                </div>
            </div>
        `;
    });
    html += '</div>';
    
    container.innerHTML = html;
}

// Step 2: Convert to Quotation
async function convertToQuotation() {
    try {
        if (!currentEstimateId) {
            throw new Error('No estimate available. Please complete Step 1 first.');
        }

        const requestData = {
            clientId: document.getElementById('clientId').value
        };

        const response = await fetch(`https://localhost:7136/api/quotations/from-estimate/${currentEstimateId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + await getAuthToken()
            },
            body: JSON.stringify(requestData)
        });

        let result;
        const responseText = await response.text();
        
        console.log('Convert to Quotation - API Response Status:', response.status);
        console.log('Convert to Quotation - API Response Text:', responseText);
        

        if (responseText) {
            try {
                // Try to parse as JSON first
                result = JSON.parse(responseText);
            } catch (parseError) {
                // If it's not JSON, treat it as a string ID
                console.log('Convert to Quotation - Response is not JSON, treating as string ID');
                result = responseText; // This is the quotation ID
            }
        } else {
            result = { message: 'Empty response from server' };
        }
        
        if (response.ok) {
            // Handle both string ID and JSON object responses
            const quotationId = typeof result === 'string' ? result : result.quotationId || result;
            currentQuotationId = quotationId;
            workflowData.quotationId = quotationId;
            
            showResponse(3, { quotationId: quotationId, message: 'Quotation created successfully' });
            markStepCompleted(2);
            markStepCompleted(3);
            
            // Enable next step
            document.getElementById('pmReviewBtn').disabled = false;
            markStepActive(4);
        } else {
            throw new Error(result.message || 'Failed to create quotation');
        }
    } catch (error) {
        showResponse(3, { error: error.message }, true);
        markStepError(3);
    }
}

// Step 4: PM Review
async function pmReview() {
    try {
        if (!currentQuotationId) {
            throw new Error('No quotation available. Please complete previous steps first.');
        }

        const action = document.getElementById('pmAction').value;
        if (!action) {
            throw new Error('Please select a PM action');
        }

        let response;
        let result;

        if (action === 'approve') {
            response = await fetch(`https://localhost:7136/api/quotations/${currentQuotationId}/pm-approve`, {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + await getAuthToken()
                }
            });
            
            const responseText = await response.text();
            console.log('PM Review - API Response Status:', response.status);
            console.log('PM Review - API Response Text:', responseText);
            
            if (responseText) {
                try {
                    result = JSON.parse(responseText);
                } catch (parseError) {
                    throw new Error(`Invalid JSON response: ${responseText}`);
                }
            } else {
                // Empty response is OK for PM approval - it means success
                result = { message: 'PM approval successful' };
            }
        } else if (action === 'edit') {
            // Open the edit modal
            openEditModal();
            return; // Exit early for edit action - modal will handle the rest
        } else if (action === 'reject') {
            // For rejection, call the API
            const rejectReason = document.getElementById('pmRejectReason').value;
            
            response = await fetch(`https://localhost:7136/api/quotations/${currentQuotationId}/pm-reject`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + await getAuthToken()
                },
                body: JSON.stringify({ reason: rejectReason })
            });
            
            const responseText = await response.text();
            console.log('PM Reject - API Response Status:', response.status);
            console.log('PM Reject - API Response Text:', responseText);
            
            if (responseText) {
                try {
                    result = JSON.parse(responseText);
                } catch (parseError) {
                    throw new Error(`Invalid JSON response: ${responseText}`);
                }
            } else {
                // Empty response is OK for PM rejection - it means success
                result = { message: 'Quotation rejected successfully', reason: rejectReason };
            }
            
            if (response.ok) {
                showResponse(4, result);
                markStepError(4); // Mark as error since it's rejected
                showResponse(5, { message: 'Workflow stopped - Quotation rejected by PM' }, true);
                return; // Exit early for reject action - workflow stops here
            } else {
                throw new Error(result.message || 'PM rejection failed');
            }
        }

        if (response && response.ok) {
            showResponse(4, result);
            markStepCompleted(4);
            
            // Enable next step
            document.getElementById('clientDecisionBtn').disabled = false;
            markStepActive(5);
        } else {
            throw new Error(result.message || 'PM review failed');
        }
    } catch (error) {
        showResponse(4, { error: error.message }, true);
        markStepError(4);
    }
}

// Step 5: Client Decision
async function clientDecision() {
    try {
        if (!currentQuotationId) {
            throw new Error('No quotation available. Please complete previous steps first.');
        }

        const decision = document.getElementById('clientDecision').value;
        const notes = document.getElementById('clientNotes').value;
        
        if (!decision) {
            throw new Error('Please select a client decision');
        }

        const requestData = {
            accept: decision === 'accept',
            note: notes
        };

        const response = await fetch(`https://localhost:7136/api/quotations/${currentQuotationId}/client-decision`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + await getAuthToken()
            },
            body: JSON.stringify(requestData)
        });

        let result;
        const responseText = await response.text();
        
        console.log('Client Decision - API Response Status:', response.status);
        console.log('Client Decision - API Response Text:', responseText);
        
        if (responseText) {
            try {
                result = JSON.parse(responseText);
            } catch (parseError) {
                throw new Error(`Invalid JSON response: ${responseText}`);
            }
        } else {
            // Empty response is OK for client decision - it means success
            result = { message: 'Client decision processed successfully' };
        }
        
        if (response.ok) {
            console.log('Client Decision - Success response, result:', result);
            showResponse(5, result);
            
            if (decision === 'accept') {
                markStepCompleted(5);
                // Enable next step
                document.getElementById('generateInvoiceBtn').disabled = false;
                markStepActive(6);
            } else {
                markStepError(5);
                showResponse(5, { message: 'Quotation declined. Workflow stopped.' }, true);
            }
        } else {
            console.log('Client Decision - Error response, status:', response.status, 'result:', result);
            throw new Error(result.message || 'Client decision failed');
        }
    } catch (error) {
        showResponse(5, { error: error.message }, true);
        markStepError(5);
    }
}

// Step 6: Generate Invoice
async function generateInvoice() {
    try {
        if (!currentQuotationId) {
            throw new Error('No quotation available. Please complete previous steps first.');
        }

        // First convert quotation to invoice
        const response = await fetch(`https://localhost:7136/api/quotations/${currentQuotationId}/convert-to-invoice`, {
            method: 'POST',
            headers: {
                'Authorization': 'Bearer ' + await getAuthToken()
            }
        });

        let result;
        const responseText = await response.text();
        
        if (responseText) {
            try {
                result = JSON.parse(responseText);
            } catch (parseError) {
                throw new Error(`Invalid JSON response: ${responseText}`);
            }
        } else {
            result = { message: 'Empty response from server' };
        }
        
        if (response.ok) {
            currentInvoiceId = result;
            workflowData.invoiceId = result;
            
            showResponse(6, { invoiceId: result, message: 'Invoice generated successfully' });
            markStepCompleted(6);
            
            // Show workflow summary
            showWorkflowSummary();
        } else {
            throw new Error(result.message || 'Failed to generate invoice');
        }
    } catch (error) {
        showResponse(6, { error: error.message }, true);
        markStepError(6);
    }
}

// Show workflow summary
function showWorkflowSummary() {
    const summaryEl = document.getElementById('workflowSummary');
    
    summaryEl.innerHTML = `
        <div class="row">
            <div class="col-md-4">
                <div class="card border-success">
                    <div class="card-body text-center">
                        <i class="fas fa-robot fa-2x text-primary mb-2"></i>
                        <h5 class="card-title">AI Estimate</h5>
                        <p class="card-text">Generated from blueprint</p>
                        <small class="text-muted">ID: ${workflowData.estimate?.estimateId || 'N/A'}</small>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card border-info">
                    <div class="card-body text-center">
                        <i class="fas fa-file-invoice fa-2x text-info mb-2"></i>
                        <h5 class="card-title">Quotation</h5>
                        <p class="card-text">PM approved & client accepted</p>
                        <small class="text-muted">ID: ${workflowData.quotationId || 'N/A'}</small>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card border-success">
                    <div class="card-body text-center">
                        <i class="fas fa-receipt fa-2x text-success mb-2"></i>
                        <h5 class="card-title">Invoice</h5>
                        <p class="card-text">Ready for payment</p>
                        <small class="text-muted">ID: ${workflowData.invoiceId || 'N/A'}</small>
                    </div>
                </div>
            </div>
        </div>
        <div class="mt-4">
            <div class="alert alert-success">
                <h5><i class="fas fa-check-circle me-2"></i>Workflow Completed Successfully!</h5>
                <p class="mb-0">The complete AI-powered construction workflow has been tested from blueprint processing to invoice generation.</p>
            </div>
        </div>
    `;
}

// Get auth token from Firebase
async function getAuthToken() {
    try {
        // Check if Firebase is available and user is signed in
        if (typeof firebase !== 'undefined' && firebase.auth().currentUser) {
            const user = firebase.auth().currentUser;
            console.log('Firebase user found:', user.email);
            const token = await user.getIdToken();
            console.log('Firebase token obtained');
            return token;
        }
        
        console.warn('No Firebase user found, checking localStorage...');
        
        // Fallback to localStorage if available
        const storedToken = localStorage.getItem('authToken');
        if (storedToken) {
            console.log('Using stored token from localStorage');
            return storedToken;
        }
        
        // For testing purposes, return a test token
        console.warn('No valid auth token found, using test token');
        return 'test-token';
    } catch (error) {
        console.error('Error getting auth token:', error);
        return 'test-token';
    }
}

// Show/hide sections based on PM action
document.getElementById('pmAction').addEventListener('change', function() {
    const editSection = document.getElementById('editSection');
    const rejectSection = document.getElementById('rejectSection');
    
    // Hide all sections first
    editSection.style.display = 'none';
    rejectSection.style.display = 'none';
    
    // Show appropriate section based on selection
    if (this.value === 'edit') {
        editSection.style.display = 'block';
    } else if (this.value === 'reject') {
        rejectSection.style.display = 'block';
    }
});

// Edit Quotation Items Functions
let quotationItems = [];

function openEditModal() {
    // Load current quotation items
    loadQuotationItems();
    
    // Show the modal
    const modal = new bootstrap.Modal(document.getElementById('editQuotationModal'));
    modal.show();
}

function loadQuotationItems() {
    // This would normally load from the current quotation
    // For now, we'll use sample data
    quotationItems = [
        { name: 'Cement (Portland)', quantity: 100, unit: 'KG', unitPrice: 2.50, lineTotal: 250.00 },
        { name: 'Bricks (Standard Red)', quantity: 4000, unit: 'PIECE', unitPrice: 3.00, lineTotal: 12000.00 },
        { name: 'Paint (White Emulsion)', quantity: 30, unit: 'LITER', unitPrice: 80.00, lineTotal: 2400.00 }
    ];
    
    renderQuotationItems();
}

function renderQuotationItems() {
    const container = document.getElementById('quotationItemsList');
    container.innerHTML = '';
    
    // Add column headers
    const headerDiv = document.createElement('div');
    headerDiv.className = 'row mb-2 fw-bold text-muted';
    headerDiv.innerHTML = `
        <div class="col-md-4">Item Name</div>
        <div class="col-md-2">Quantity</div>
        <div class="col-md-2">Unit</div>
        <div class="col-md-2">Unit Price</div>
        <div class="col-md-1">Total</div>
        <div class="col-md-1">Action</div>
    `;
    container.appendChild(headerDiv);
    
    quotationItems.forEach((item, index) => {
        const itemDiv = document.createElement('div');
        itemDiv.className = 'card mb-2';
        itemDiv.innerHTML = `
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <input type="text" class="form-control" value="${item.name}" 
                               onchange="updateQuotationItem(${index}, 'name', this.value)">
                    </div>
                    <div class="col-md-2">
                        <input type="number" class="form-control" value="${item.quantity}" 
                               onchange="updateQuotationItem(${index}, 'quantity', this.value)">
                    </div>
                    <div class="col-md-2">
                        <input type="text" class="form-control" value="${item.unit}" 
                               onchange="updateQuotationItem(${index}, 'unit', this.value)">
                    </div>
                    <div class="col-md-2">
                        <input type="number" class="form-control" value="${item.unitPrice}" step="0.01"
                               onchange="updateQuotationItem(${index}, 'unitPrice', this.value)">
                    </div>
                    <div class="col-md-1">
                        <span class="form-control-plaintext">${item.lineTotal.toFixed(2)}</span>
                    </div>
                    <div class="col-md-1">
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeQuotationItem(${index})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;
        container.appendChild(itemDiv);
    });
}

function updateQuotationItem(index, field, value) {
    if (field === 'quantity' || field === 'unitPrice') {
        quotationItems[index][field] = parseFloat(value) || 0;
        quotationItems[index].lineTotal = quotationItems[index].quantity * quotationItems[index].unitPrice;
    } else {
        quotationItems[index][field] = value;
    }
    
    // Re-render to update line totals
    renderQuotationItems();
}

function addQuotationItem() {
    quotationItems.push({
        name: 'New Item',
        quantity: 1,
        unit: 'PIECE',
        unitPrice: 0.00,
        lineTotal: 0.00
    });
    renderQuotationItems();
}

function removeQuotationItem(index) {
    quotationItems.splice(index, 1);
    renderQuotationItems();
}

function saveQuotationEdits() {
    const editNotes = document.getElementById('modalEditNotes').value;
    
    // Calculate totals
    const subtotal = quotationItems.reduce((sum, item) => sum + item.lineTotal, 0);
    const taxTotal = subtotal * 0.15; // 15% VAT
    const grandTotal = subtotal + taxTotal;
    
    const result = {
        message: 'Quotation edited successfully',
        editNotes: editNotes,
        items: quotationItems,
        subtotal: subtotal,
        taxTotal: taxTotal,
        grandTotal: grandTotal
    };
    
    // Close modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('editQuotationModal'));
    modal.hide();
    
    // Show result
    showResponse(4, result);
    markStepCompleted(4);
    
    // Enable next step
    document.getElementById('clientDecisionBtn').disabled = false;
    markStepActive(5);
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    markStepActive(1);
});
</script>
